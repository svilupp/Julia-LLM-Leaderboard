[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"\"\"\"\nextract_julia_code(md::AbstractString)\n\nExtract Julia code blocks from the markdown document `md`, remove code fences, and join the code blocks together into a single string with newlines between each block.\n\n# Examples\n\n```\nmd = \\\"\\\"\\\"\nHere is some text\n\n```julia\nx = 1\n```\n\nMore text\n\n```julia\ny = 2\nz = 3\n```\n\\\"\\\"\\\"\n\nextract_julia_code(md)\n\\\"\\\"\nx = 1\n\ny = 2\nz = 3\n\\\"\\\"\n```\n\"\"\"\nfunction extract_julia_code(md::AbstractString)\n    code = String[]\n    fence = \"```\"\n    lang = \"julia\"\n    inblock = false\n\n    for line in split(md, \"\\n\")\n        if startswith(line, fence*3*\" \") && endswith(line, fence*3*\" \")\n            inblock = startswith(line, \"$(fence)julia\") \n        elseif inblock\n            push!(code, line)\n            inblock = false\n        end\n    end\n    \n    join(code, \"\\n\")\nend","status":200,"tokens":[355,258],"elapsed":11.601343167,"cost":0.009032,"log_prob":null,"finish_reason":"end_turn","run_id":-14006,"sample_id":null,"_type":"aimessage"}]