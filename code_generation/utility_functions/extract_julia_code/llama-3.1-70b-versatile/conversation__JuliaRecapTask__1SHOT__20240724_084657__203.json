[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is a high-quality, readable, and well-documented code solution:\n\n```julia\nfunction extract_julia_code(md)\n    \"\"\"\n    Extracts Julia code blocks from a markdown document and joins them into a single string.\n\n    Parameters:\n        md (String): A markdown document containing Julia code blocks.\n\n    Returns:\n        String: The extracted Julia code joined by newlines.\n    \"\"\"\n\n    # Regular expression to match markdown code fences with 'julia' language identifier\n    pattern = r\"^```julia[\\s\\S]*?^```\"\n\n    # Use 'eachmatch' from Julia standard library to find all code blocks in markdown\n    matches = collect(eachmatch(Regex(pattern, \"m\"), md))\n\n    # Join code blocks by newlines after removing the 'julia' fences and code lines prefixes\n    julia_code = join(strip(match.match, '\\n'^'\\\\n' |> strip |> (string ^ s->lstrip(s))...) for match in matches)\n\n    return julia_code\nend\n```","status":200,"tokens":[343,212],"elapsed":1.921575667,"cost":0.00036984999999999996,"log_prob":null,"finish_reason":"stop","run_id":292190721,"sample_id":null,"_type":"aimessage"}]