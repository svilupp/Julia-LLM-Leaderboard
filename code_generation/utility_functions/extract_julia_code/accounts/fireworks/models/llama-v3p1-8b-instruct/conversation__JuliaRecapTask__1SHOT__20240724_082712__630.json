[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::String)\n    # Use the Markdown parsing library, Parsers.jl\n    using Parsers\n\n    # Define a parser for code blocks\n    parser = Rule{String}(\"code_block\") do input, state\n        # Match a fenced code block (e.g., ```...``` or ```language ...``` )\n        state pos: 3\n        match(input, '`,', state)\n        match(input, anyof(Digit, Letter), state)\n        match(input, '`,', state)\n        rest = input[state.pos:end]\n        match(rest, anyof(Digit, Letter), state)\n        match(rest, '`,', state)\n        match(input, '```', state)\n        if !isnothing(match(input, anyof(Digit, Letter), state))\n            # Extract code\n            code = input[state.pos+2:state.pos+length(match(input, '`,', state))-1]\n        elseif !isnothing(match(input, noneof(Digit, Letter), state))\n            # Extract code\n            code = input[state.pos+2:state.pos-1]\n        else\n            code = input[state.pos+2:state.pos-1]\n        end\n        return code\n    end\n\n    # Parse markdown document\n    trees = anyuntil(md, '\\n\\n', '```\\n', parser)\n    \n    # Join code blocks together\n    # Remove empty strings\n    code = join([code for code in trees if code != \"\"])\n    \n    return code\nend\n```","status":200,"tokens":[341,323],"elapsed":1.412463625,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":-1498282782,"sample_id":null,"_type":"aimessage"}]