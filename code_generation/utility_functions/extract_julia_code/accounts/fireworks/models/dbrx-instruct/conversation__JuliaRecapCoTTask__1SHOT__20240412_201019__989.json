[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Sure, here is the function `extract_julia_code` that meets your special instructions:\n```julia\nfunction extract_julia_code(text::AbstractString; inline_code::Bool=true, code_fence_pattern::Regex=r\"`(?s)(.*?)`\")\n    code_blocks = String[]\n    in_code_block = false\n    current_block = IOBuffer()\n\n    for line in eachline(IOBuffer(text))\n        if occursin(r\"^````*\", line)\n            if!isempty(strip(current_block))\n                push!(code_blocks, String(take!(current_block)))\n            end\n            in_code_block =!in_code_block\n            current_block = IOBuffer()\n        elseif in_code_block\n            println(current_block, line)\n        elseif inline_code && occursin(code_fence_pattern, line)\n            code_blocks[end] *= String(match(code_fence_pattern, line).captures[1]) * \"\\n\"\n        else\n            println(current_block, line)\n        end\n    end\n\n    if!","status":200,"tokens":[341,200],"elapsed":3.458838333,"cost":0.0008655999999999999,"log_prob":null,"finish_reason":"length","run_id":-1239747107,"sample_id":null,"_type":"aimessage"}]