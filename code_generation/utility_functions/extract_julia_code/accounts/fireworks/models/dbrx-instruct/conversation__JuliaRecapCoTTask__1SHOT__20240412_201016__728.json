[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Sure, based on your instructions, I will prioritize the special instructions over the general guidelines for the Julia language. Let's write the function `extract_julia_code` that extracts all the Julia language code blocks from a markdown document.\n\n```julia\nfunction extract_julia_code(md::AbstractString; language_filter::AbstractString=\"julia\")\n    result = String[]\n    code_block = false\n    for line in split(md, '\\n')\n        if startswith(line, \"```\") && endswith(line, \"```\")\n            # Found a fenced code block\n            if code_block && endswith(line, \"```$language_filter\")\n                # End of Julia code block\n                push!(result, \"\")\n                code_block = false\n            elseif!code_block && startswith(line, \"```$language_filter\")\n                # Start of Julia code block\n                code_block = true\n            end\n        elseif code_block\n            # Inside Julia code block, append the line","status":200,"tokens":[341,200],"elapsed":4.109540084,"cost":0.0008655999999999999,"log_prob":null,"finish_reason":"length","run_id":-1800546875,"sample_id":null,"_type":"aimessage"}]