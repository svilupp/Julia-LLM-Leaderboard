[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)\n    # Find julia code blocks\n    re = r\"```julia\\n(.*?)\\n```\"s => s\"\\1\"\n    \n    # Replace all julia code blocks with the code only\n    code_blocks = replace(md, re)\n    \n    # Join code blocks if they are split\n    code_blocks = replace(code_blocks, r\"\\n[^\\S\\n]*\\n\" => \"\\n\")\n    \n    # Remove first and last lines if they are blank\n    function remove_leading_trailing_blanklines(code::AbstractString)\n        lines = split(code, \"\\n\")\n        leading = countlines_fromstart(lines, blank) \n        trailing = countlines_fromend(lines, blank) \n        left  = 1+leading > length(lines) ? 0 : 1+leading\n        right = length(lines) - trailing > 0 ? length(lines) - trailing : 0\n        lines, left, right\n    end\n\n    function countlines_fromstart(lines, char::AbstractChar)\n        num = 0\n        for line in lines\n            if length(line) == 0 && char == blank        \n                num += 1\n            else\n                break\n            end\n        end\n        num \n    end\n    \n    function countlines_fromend(lines, char::AbstractChar)\n        i = length(lines)\n        while i > 0\n            line = lines[i] \n            if length(line) == 0 && char == blank      \n                i -= 1\n            else\n                break\n            end\n        end\n        num = length(lines) - i\n        num\n    end\n\n    lines, left, right = remove_leading_trailing_blanklines(code_blocks)\n    if (left > right)\n        \"\"\n    else\n        join(lines[left:right], \"\\n\")\n    end\nend\n\nconst blank             = Char(32)\n```","status":200,"tokens":[341,406],"elapsed":15.287981375,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":-729125021,"sample_id":null,"_type":"aimessage"}]