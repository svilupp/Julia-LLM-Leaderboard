[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```python\nfrom datetime import datetime, timedelta\n\ndef timezone_bumper(dt, bump=3):\n    \"\"\"\n    Increases any provided timestamp by bump hours (defaults to +3 hours).\n\n    Args:\n        dt (datetime): The datetime object to be bumped.\n        bump (int, optional): The number of hours to bump the datetime. Defaults to 3.\n\n    Returns:\n        datetime: The bumped datetime.\n    \"\"\"\n    \n    # Check if the input is a datetime object\n    if not isinstance(dt, datetime):\n        raise TypeError(\"Input must be a datetime object\")\n    \n    # Check if the time is midnight, if so return it as is\n    if dt.hour == 0 and dt.minute == 0 and dt.second == 0:\n        return dt\n    \n    # Calculate the time delta\n    delta = timedelta(hours=bump)\n    \n    # Add the time delta to the datetime\n    bumped_dt = dt + delta\n    \n    return bumped_dt\n```","status":200,"tokens":[328,198],"elapsed":2.087346292,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":909551647,"sample_id":null,"_type":"aimessage"}]