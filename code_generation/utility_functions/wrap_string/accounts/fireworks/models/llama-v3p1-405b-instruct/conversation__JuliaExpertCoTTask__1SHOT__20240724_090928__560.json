[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"**Solution**\n```julia\n\"\"\"\nWrap a string into lines with a maximum width.\n\nArguments:\n- text (String): The input string to wrap.\n- text_width (Int, optional): The maximum width per line. Defaults to 10.\n\nReturns:\n- String: The wrapped string with newlines.\n\"\"\"\nfunction wrap_string(text::String, text_width::Int=10)\n    words = split(text)\n    wrapped_text = \"\"\n\n    current_width = 0\n    for word in words\n        if current_width + length(word) + 1 > text_width\n            wrapped_text *= \"\\n\"\n            current_width = 0\n        elseif current_width != 0\n            wrapped_text *= \" \"\n            current_width += 1\n        end\n        wrapped_text *= word\n        current_width += length(word)\n    end\n    wrapped_text\nend\n\n# **Test**\ndata = \"This function will wrap words into lines\"\nprintln(wrap_string(data, 15))\n```","status":200,"tokens":[165,202],"elapsed":8.290420625,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":287010854,"sample_id":null,"_type":"aimessage"}]