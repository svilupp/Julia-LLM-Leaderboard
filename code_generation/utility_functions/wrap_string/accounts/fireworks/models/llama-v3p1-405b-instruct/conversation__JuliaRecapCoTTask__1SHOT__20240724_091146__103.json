[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"/**\n * A function that wraps a string by a specified width. It iterates over words and \n * it will add a new line each time a maximum width would be exceeded.\n * @param {string} text - The text to be wrapped.\n * @param {number} text_width - The maximum width before a line break is inserted (default=10).\n * @returns {string} The wrapped string.\n */\nfunction wrap_string(text, text_width = 10) {\n    // Split the text into words\n    let words = String(text).split(' ');\n\n    // Initialize the wrapped string with the first word\n    let wrapped_string = words.shift();\n\n    // Iterate over each word\n    words.forEach(word => {\n        // Calculate the length of the next line\n        let next_line_length = ((wrapped_string || '').split('\\n').pop() || '').length + word.length + 1;\n\n        // If the next line length would not exceed the text width, append the word\n        if (next_line_length <= text_width) {\n            if (wrapped_string.includes('\\n'))\n                wrapped_string += ' ' + word;\n            else\n                wrapped_string += ' ' + word;\n        }\n        // Otherwise, append the word with a line break\n        else\n            wrapped_string += '\\n' + word;\n    });\n\n    // Return the wrapped string\n    return wrapped_string;\n}\n\n// Example\nconsole.log(wrap_string(\"Your test string with multiple words is here to wrap for you.\", 10));","status":200,"tokens":[320,310],"elapsed":12.4545295,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":1311263089,"sample_id":null,"_type":"aimessage"}]