[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Task Solution\n\n## Wrap String Function\n\nWe'll write a function named `wrap_string` that takes an input string and wraps it at a specified maximum text width. This is a useful utility for text formatting in terminal output or document processing.\n\n\n```julia\nimport Base.Text\n\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    # Split the input text into words\n    words = split(text)\n    \n    # Initialize the current line and result string\n    current_line = \"\"\n    result = \"\"\n    \n    # Iterate over each word\n    for word in words\n        # If adding the current word would exceed text width\n        if length(current_line) + length(word) + 1 > text_width\n            # Append the current line to the result and reset the current line\n            result *= current_line * \"\\n\"\n            current_line = word\n        else\n            # If adding the current word would not exceed text width, add it with a space\n            if !isempty(current_line)            \n                current_line *= \" \" * word\n            else                    \n                current_line = word     \n            end\n        end\n    end\n    # Append the last line to the result\n    result *= current_line\n    return result\nend\n```\n\n\n### Example Usage\n\n\n```julia\n# Test the function with a string\nx = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam viverra Fusce ut placerat lectus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\"\nprintln(wrap_string(x))\n```","status":200,"tokens":[320,336],"elapsed":1.194277,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":503984771,"sample_id":null,"_type":"aimessage"}]