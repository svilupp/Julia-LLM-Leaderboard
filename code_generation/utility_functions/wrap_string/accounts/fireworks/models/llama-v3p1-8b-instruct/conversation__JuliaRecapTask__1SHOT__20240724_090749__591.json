[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\n# Define the wrap_string function\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    words = split(text, \" \")\n    lines = []\n    current_line = \"\"\n    \n    # Iterate over each word in the text\n    for word in words\n        # If adding the word to the current line would exceed the text width\n        if length(current_line) + length(word) + 1 > text_width\n            # If the word does not fit on the last line, add a new line\n            if length(word) > text_width\n                lines = vcat(lines, [current_line])\n                current_line = word\n            else\n                push!(lines, current_line)\n                current_line = word\n            end\n        else\n            # Add the word to the current line\n            current_line *= \" \" * word\n        end\n    end\n    \n    # Add the last line if it is not empty\n    if !isempty(current_line)\n        push!(lines, current_line)\n    end\n    \n    return join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sapien est, blandit at congue et, mollis non leo. In euismod ornare purus, id congue justo tempus quis. Maecenas felis nulla, tincidunt nec dui eget.\"\nwrapped_text = wrap_string(text, text_width = 50)\nprintln(wrapped_text)\n```\n\nWhen you run this code, it will output the `text` with each line wrapped at 50 characters.","status":200,"tokens":[319,337],"elapsed":1.199112875,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":-1229345991,"sample_id":null,"_type":"aimessage"}]