[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the Julia code with a well-factored function and example usage:\n\n```julia\n# Define a function wrap_string that takes a string and an optional text width\nfunction wrap_string(text::AbstractString; text_width::Int=10)\n    words = split(text, \" \")\n    current_length = 0\n    final_text = []\n\n    # Iterate over each word in the text\n    for word in words\n        current_length += length(word)\n        current_length += 1  # account for a space after each word\n        \n        # If the current text length exceeds the text width, start a new line\n        if current_length > text_width\n            # Add a newline to the final text before adding the current word\n            push!(final_text, \"\\n\")\n            current_length = 0  # reset the current length\n        end\n\n        # Add a space after each word and append the current word to the final text\n        push!(final_text, \" \")\n        push!(final_text, word)\n        current_length += 1\n    end\n\n    # Replace spaces at the beginning and end with an empty string\n    return join(final_text, \"\")[1:end-1]\nend\n\n# Example usage\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur sed urna sit amet magna ultrices viverra nec sit amet sapien. Aliquam erat volutpat.\"\nwrapped_text = wrap_string(text, text_width=60)\nprintln(wrapped_text)\n```\n\nIn the above code, the `wrap_string` function iterates through the words, when the `current_length` exceeds the specified `text_width` it starts a new line until the word fits into the line without exceeding the maximum text width. It leaves a space after each word. \n\nThe example usage provided demonstrates this on the provided sample text and sets the text width to `60`.","status":200,"tokens":[320,390],"elapsed":1.377231458,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":-1245110769,"sample_id":null,"_type":"aimessage"}]