[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's a function `wrap_string` that wraps a given string into lines of a specified maximum width:\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    lines = String[]\n    current_line = \"\"\n\n    for word in words\n        if length(current_line) + length(word) + 1 > text_width\n            push!(lines, strip(current_line))\n            current_line = \"\"\n        end\n        current_line *= (isempty(current_line) ? \"\" : \" \") * word\n    end\n\n    if !isempty(current_line)\n        push!(lines, strip(current_line))\n    end\n\n    return join(lines, \"\\n\")\nend\n```\n\nHere's an example of how to use the `wrap_string` function:\n\n```julia\ntext = \"The quick brown fox jumps over the lazy dog.\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```\n\nThis will output:\n\n```\nThe quick\nbrown fox\njumps over\nthe lazy\ndog.\n```\n\nThe function `wrap_string` works as follows:\n\n1. It splits the input `text` into a list of words using `split(text)`.\n2. It initializes an empty array `lines` to store the wrapped lines, and a `current_line` string to keep track of the current line being built.\n3. It iterates over each word in the list of words:\n   - If adding the current word to the `current_line` would exceed the `text_width`, it trims the `current_line` and adds it to the `lines` array, then resets the `current_line` to an empty string.\n   - It then appends the current word to the `current_line`, separated by a space if the `current_line` is not empty.\n4. After the loop, if the `current_line` is not empty, it adds it to the `lines` array.\n5. Finally, it joins the lines in the `lines` array using newline characters and returns the resulting string.\n\nThe function can be used with a custom `text_width` parameter, which defaults to 10 if not provided.","status":200,"tokens":[344,518],"elapsed":5.153820125,"cost":0.0007335000000000001,"log_prob":null,"finish_reason":"end_turn","run_id":-10458,"sample_id":null,"_type":"aimessage"}]