[{"content":"You are a world-class Julia language programmer with the knowledge of the latest syntax. Your communication is brief and concise. You're precise and answer only when you're confident in the high quality of your answer.","variables":[],"_type":"systemmessage"},{"content":"# Question\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example","variables":["ask"],"_type":"usermessage"},{"content":"Here's a Julia function `wrap_string` that takes a string and a maximum text width, and returns the string with newlines added whenever the maximum width would be exceeded:\n\n```julia\nfunction wrap_string(text::String, text_width::Int=10)\n    words = split(text)\n    result = \"\"\n    current_line_length = 0\n    for word in words\n        if current_line_length + length(word) > text_width\n            result *= \"\\n\"\n            current_line_length = 0\n        end\n        result *= word * \" \"\n        current_line_length += length(word) + 1\n    end\n    return rstrip(result)\nend\n```\n\nExample usage:\n\n```julia\ntext = \"This is a sample text that will be wrapped to a maximum width of 10 characters per line.\"\nwrapped_text = wrap_string(text, 10)\nprintln(wrapped_text)\n```\n\nOutput:\n```\nThis is a\nsample\ntext that\nwill be\nwrapped to\na maximum\nwidth of\n10\ncharacters\nper line.\n```\n\nThe function `wrap_string` first splits the input `text` into a vector of words using `split(text)`. It then iterates over each word, keeping track of the current line length. If adding the next word would exceed the maximum `text_width`, a newline is added to the `result` string. Finally, the function trims any trailing whitespace from the result and returns it.","status":200,"tokens":[94,341],"elapsed":3.46804775,"cost":0.00044975,"log_prob":null,"finish_reason":"end_turn","run_id":-58,"sample_id":null,"_type":"aimessage"}]