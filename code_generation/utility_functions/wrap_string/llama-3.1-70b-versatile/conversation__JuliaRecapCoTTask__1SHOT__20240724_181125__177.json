[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the solution to the task:\n\n```julia\nfunction wrap_string(text; text_width::Int=10)\n    words = split(text, \" \")\n    lines = String[]\n    current_line = \"\"\n\n    for word in words\n        if length(current_line) + length(word) + 1 > text_width\n            push!(lines, current_line)\n            current_line = word\n        else\n            if !isempty(current_line)\n                current_line *= \" \"\n            end\n            current_line *= word\n        end\n    end\n\n    push!(lines, current_line)\n    return join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc accumsan sem ut ligula scelerisque sollicitudin.\"\nprintln(wrap_string(text))\n```\n\nIn this code:\n\n*   We define a function `wrap_string` that takes a `text` string and an optional `text_width` parameter with a default value of 10.\n*   We split the input `text` into individual words using the `split` function.\n*   We initialize an empty array `lines` to store the wrapped lines of text and a `current_line` variable to build the current line of text.\n*   We iterate over each word in the `words` array. If adding the current word to the `current_line` would exceed the `text_width`, we append the `current_line` to the `lines` array and start a new line with the current word. Otherwise, we append the word to the `current_line`.\n*   After processing all words, we append the last `current_line` to the `lines` array.\n*   Finally, we join the `lines` array into a single string with newline characters using the `join` function and return the result.\n\nThe example usage demonstrates how to call the `wrap_string` function with a sample text and print the wrapped result.","status":200,"tokens":[322,400],"elapsed":1.982725625,"cost":0.00050598,"log_prob":null,"finish_reason":"stop","run_id":1260059928,"sample_id":null,"_type":"aimessage"}]