[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Base.Iterators\nfunction wrap_string(text::AbstractString; text_width::Union{Missing, Int64}=10)\n    function count_char(c, s::AbstractString)\n        z = length(findall(c, s))\n        return z\n    end\n\n    words = split(text, \"[\\t ]\")\n    wrapped_text = [words[1]]\n    char_count = count_char(\" \", words[1])\n    prev = \"\"\n    for word in words[2:end]\n        prev = prev * \" \"\n        if char_count > 0\n            char_count -= 1\n        end\n        wordlen = length(word)\n        curr = prev * word\n        char_count += wordlen\n        if char_count > text_width\n            wrapped_text[end] = wrapped_text[end] * \"\\n\"\n            prev = prev * word\n            char_count = wordlen\n        else\n            prev = curr\n        end\n        wrapped_text[end] = wrapped_text[end] * word\n    end\n    return wrapped_text\nend\n\nwrapped_text = wrap_string(\"\"\"\nThis is a sample text\nthat we want to wrap\nto a certain width\n\"\"\")\n\nprintln(wrapped_text)\n```","status":200,"tokens":[0,0],"elapsed":5.317929834,"_type":"aimessage"}]