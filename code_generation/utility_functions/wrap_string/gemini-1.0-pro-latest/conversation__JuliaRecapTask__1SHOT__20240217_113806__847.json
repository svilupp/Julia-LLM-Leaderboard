[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\n\nfunction wrap_string(text_string::AbstractString; text_width::Int=10)::AbstractString\n    l = split(text_string, indexin=1)\n    sz = length(l)\n    v = Vector{Union{AbstractString, Int}}()\n\n    for i in 1:sz\n        l_width = length(l[i])\n        if (length(v) > 0 && l_width + v[end] < text_width) || length(v) == 0\n            push!(v, l_width)\n            push!(v, l[i])\n        else\n            push!(v, v[end] - 1)\n            v[end] = l_width + 1\n            push!(v, l[i])\n        end\n\n    end\n    l = Dict()\n    for i in 1:length(v)\n        if i % 2 == 0\n            l[i] = \" \" * v[i-1]\n        else\n            l[i] = l[i] * l[i]\n        end\n    end\n    join(l, 'T')\nend\n\nexample_text = \"Lorem I am long text. Should be wrapped around after 10. But not always. Just restart counting when it breaks.\"\n\n@show wrap_string(example_text)\n\n```","status":200,"tokens":[0,0],"elapsed":5.330204166,"_type":"aimessage"}]