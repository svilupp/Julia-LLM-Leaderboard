[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)::AbstractString\n    # Create a new string to hold the formatted text\n    formatted_text = \"\"\n    # Split the input text into words\n    words = split(text)\n    # Iterate over the words\n    for word in words\n        # Check if the current length of the formatted text plus the length of the current word exceeds the maximum text width\n        if length(formatted_text) + length(word) > text_width\n            # If it does, add a newline character to the formatted text\n            formatted_text = formatted_text * \"\\n\"\n        end\n        # Add the current word to the formatted text\n        formatted_text = formatted_text * word\n    end\n    # Return the formatted text\n    return formatted_text\nend\n\n# Example\ntext = \"This is a long string that needs to be wrapped to a maximum width of 10 characters per line.\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n\n```","status":200,"tokens":[0,0],"elapsed":4.526375292,"_type":"aimessage"}]