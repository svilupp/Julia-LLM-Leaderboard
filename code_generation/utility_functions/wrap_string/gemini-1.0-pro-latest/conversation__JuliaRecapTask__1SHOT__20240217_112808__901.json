[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\n\nusing Formatting\n\nconst text = \"\"\"\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas mattis, massa in mattis aliquam, lorem leo hendrerit metus, quis sollicitudin ipsum ante sed leo. Donec bibcentesndum consequat ante, at interdum nibh molestie at. Fusce vulputate ipsum velit, venenatis commondo cursus.\n\"\"\"\n\nfunction wrap_string(input, text_width::Int)\n    wrapped_string = \"\"\n    words = split(input)\n    width_so_far = 0\n\n    for word in words\n        new_width = width_so_far + length(word)\n        if new_width > text_width\n            wrapped_string *= \"$word\\n\"\n            width_so_far = length(word)\n        else\n            width_so_far += length(word) + 1  # for the space\n            wrapped_string *= \" $word\"\n        end\n    end\n    return wrapped_string\nend\n\nprintln(wrap_string(text, 30))\n\n```","status":200,"tokens":[0,0],"elapsed":4.778486834,"_type":"aimessage"}]