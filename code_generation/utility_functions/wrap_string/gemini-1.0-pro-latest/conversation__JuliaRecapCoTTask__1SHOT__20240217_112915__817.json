[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\n\nusing Base.Iterators.filter, LinearAlgebra, Printf\n\n# Convert an array to a string with fixed element width.\nelement_width(x) = round(Int, div(maximum(map(length, x)), 6))\n\n# Convert a matrix to a string with fixed element width.\nmatrix_to_string(m; element_width=element_width(m)) = \"\\n\".join(join(eachrow(m), \" \" * (element_width-length(el))))\n\n# Convert array to maximum length string like element_width.\narray_to_string(x; element_width) = array_to_string(reshape(transpose([x]), Integer))\n\n# Convert columns to cells.\narray_to_cols(a)  = reshape(transpose(reshape(a[1:end], Integer, 2)), 2)\n\n# To number of elements\nn_elements(T) = length(T())\n\n# Convert number of rows of array to maximum number of rows\nn_rows(a) = round(div(n_elements(a), n_columns(a)))\n\n\n# Wrap a string to a given length with word boundaries.\nwrap_string(text::AbstractString; text_width::Int = 10) =\n    words = split(text, \" \")\n    cols = array_to_cols(words)\n    cols = map(columnsum, cols; n_rows = n_rows(cols))\n    result = array_to_string(cols; element_width = text_width)\n    result\n\n#printing a larger text for demo purposes:\nprintln(wrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam vestibulum eros non accumsan malesuada. Sed aliquet ultrices nibh, tincidunt dignissim sem luctus at. Phasellus pharetra fringilla imperdiet. Nulla ullamcorper sodales et. Suspendisse felis urna, fermentum bibendum volutpat a, malesuada et tellus. Mauris tortor ante, pretium euismod et, dapibus in arcu. Phasellus ut dignissim lectus. Sed a lacus ultrices nibh pretium eleifend.\", 15))\n\n```","status":200,"tokens":[0,0],"elapsed":8.552819584,"_type":"aimessage"}]