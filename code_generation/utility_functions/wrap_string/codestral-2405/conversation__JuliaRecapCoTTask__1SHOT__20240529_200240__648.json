[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    wrapped_text = Vector{String}()\n    current_line = String()\n\n    for word in words\n        if length(current_line) + length(word) <= text_width\n            current_line *= \" \" * word\n        else\n            push!(wrapped_text, strip(current_line))\n            current_line = word\n        end\n    end\n\n    push!(wrapped_text, strip(current_line))\n\n    return join(wrapped_text, \"\\n\")\nend\n\n# Example usage\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce convallis risus et velit ultricies, id lacinia arcu elementum.\"\nwrapped_text = wrap_string(text, 20)\nprintln(wrapped_text)\n```\n\nThis function `wrap_string` takes in a string `text` and an integer `text_width` as arguments. It splits the input text into words and iterates through each word to construct lines that do not exceed the specified `text_width`. If a word cannot fit on the current line, it is added to the `wrapped_text` vector and a new line is started. Finally, the function returns the wrapped text as a single string with newline characters between each line.\n\nIn the example usage, the function is called with a sample text and a `text_width` of 20. The wrapped text is then printed to the console.","status":200,"tokens":[366,371],"elapsed":6.148206833,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":-492883101,"sample_id":null,"_type":"aimessage"}]