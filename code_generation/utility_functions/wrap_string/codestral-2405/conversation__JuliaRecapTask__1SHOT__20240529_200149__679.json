[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(s::AbstractString, text_width::Int=10)\n    words = split(s)\n    lines = Vector{String}()\n    current_line = String()\n\n    for word in words\n        if isempty(current_line)\n            current_line = word\n        elseif length(current_line) + 1 + length(word) <= text_width\n            current_line = current_line * \" \" * word\n        else\n            push!(lines, current_line)\n            current_line = word\n        end\n    end\n\n    if !isempty(current_line)\n        push!(lines, current_line)\n    end\n\n    return join(lines, '\\n')\nend\n\n# Example\ntext = \"This is a sample text for the task.\"\nwrapped_text = wrap_string(text, 15)\nprintln(wrapped_text)\n```\n\nThis function `wrap_string` takes a string `s` and an optional `text_width` as arguments. It splits the input string into words and then iterates over each word. It constructs lines such that the length of each line (including the spaces between words) is less than or equal to the specified `text_width`. If a word makes the current line exceed the `text_width`, it starts a new line with that word. Finally, it joins all the lines with a newline character and returns the resulting string. In the provided example, the function wraps the text at 15 characters per line.","status":200,"tokens":[364,350],"elapsed":2.470737958,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":-712167544,"sample_id":null,"_type":"aimessage"}]