[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::String, text_width::Int=10)\n    words = split(text)\n    current_line_length = 0\n    wrapped_text = \"\"\n\n    for word in words\n        if current_line_length + length(word) > text_width\n            wrapped_text *= \"\\n\"\n            current_line_length = 0\n        end\n        if current_line_length > 0\n            wrapped_text *= \" \"\n        end\n        wrapped_text *= word\n        current_line_length += length(word) + 1\n    end\n\n    return wrapped_text\nend\n\n# Example\nprintln(wrap_string(\"This function will wrap words into lines\", 10))\n```\n\nThis function splits the text into words, then iterates over the words. It adds the word to the current line if it fits; otherwise, it starts a new line and adds the word there. The result is a string with new lines inserted at appropriate positions to ensure no line exceeds the specified `text_width`.","status":200,"tokens":[179,244],"elapsed":1.696826042,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":300481741,"sample_id":null,"_type":"aimessage"}]