[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::String, text_width::Int=10)\n    words = split(text)\n    current_line_length = 0\n    wrapped_text = \"\"\n\n    for word in words\n        if current_line_length + length(word) + (current_line_length > 0 ? 1 : 0) > text_width\n            wrapped_text *= \"\\n\"\n            current_line_length = 0\n        end\n        wrapped_text *= (current_line_length > 0 ? \" \" : \"\") * word\n        current_line_length += length(word) + (current_line_length > 0 ? 1 : 0)\n    end\n    return wrapped_text\nend\n\nprintln(wrap_string(\"This function will wrap words into lines\"))\n```\nThis code defines a function `wrap_string` which takes in a string `text` and an integer `text_width` as parameters. The function splits the `text` into words, and then iterates over these words. If the length of the current word plus the length of the current line would exceed the `text_width`, the function adds a new line to `wrapped_text`. The function then appends the current word to `wrapped_text`. After iterating over all the words, the function returns `wrapped_text`. The final line of the code calls `wrap_string` with the provided example and prints the result.","status":200,"tokens":[179,329],"elapsed":2.318225583,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":487865755,"sample_id":null,"_type":"aimessage"}]