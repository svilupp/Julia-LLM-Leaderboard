[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(s::AbstractString, text_width::Int=10)\n    words = split(s)\n    result = \"\"\n    current_line_length = 0\n\n    for word in words\n        if current_line_length + length(word) > text_width\n            result = string(result, \"\\n\", word)\n            current_line_length = length(word)\n        else\n            if result != \"\"\n                result = string(result, \" \", word)\n                current_line_length += length(word) + 1\n            else\n                result = word\n                current_line_length = length(word)\n            end\n        end\n    end\n\n    return result\nend\n\n# Example\ns = \"This is a test string. It should be wrapped at a certain width.\"\nprintln(wrap_string(s, 15))\n```\n\nThis function `wrap_string` takes an input string `s` and a maximum text width `text_width` as arguments. It splits the input string into words, then iterates over each word and adds it to the result string. If adding a word would exceed the maximum text width, it adds a new line character to the result string before adding the word. The function then returns the result string, which is the input string wrapped at the maximum text width.","status":200,"tokens":[364,309],"elapsed":2.187823791,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":-776468432,"sample_id":null,"_type":"aimessage"}]