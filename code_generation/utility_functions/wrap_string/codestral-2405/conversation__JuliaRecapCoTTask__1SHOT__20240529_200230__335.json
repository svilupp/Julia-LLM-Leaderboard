[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text, \" \")\n    result = \"\"\n    current_length = 0\n\n    for word in words\n        if current_length + length(word) > text_width\n            result *= \"\\n\"\n            current_length = 0\n        elseif current_length > 0\n            result *= \" \"\n            current_length += 1\n        end\n\n        result *= word\n        current_length += length(word)\n    end\n\n    return result\nend\n\nexample_text = \"This is a sample text that we will wrap to a certain width.\"\nwrapped_text = wrap_string(example_text, 15)\nprintln(wrapped_text)\n```\n\nThe function `wrap_string` takes a string as input and an optional `text_width` parameter. It splits the input text into words, then iterates over each word. If the current length plus the length of the next word would exceed the `text_width`, it adds a new line to the result and resets the current length. Otherwise, it adds a space and the word to the result, updating the current length accordingly.\n\nIn the example, the `example_text` is wrapped to a `text_width` of 15, and the result is printed to the console.","status":200,"tokens":[366,314],"elapsed":2.237122333,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":-1659272415,"sample_id":null,"_type":"aimessage"}]