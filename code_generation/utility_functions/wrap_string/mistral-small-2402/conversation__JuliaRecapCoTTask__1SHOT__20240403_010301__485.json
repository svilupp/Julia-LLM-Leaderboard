[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is a Julia function `wrap_string` that wraps a string at a given maximum text width:\n\n```julia\nfunction wrap_string(str::AbstractString; text_width::Int=10)::AbstractString\n    words = split(str)\n    wrapped_lines = String[]\n    current_line = \"\"\n    for word in words\n        if length(current_line) + length(word) + 1 > text_width\n            push!(wrapped_lines, current_line)\n            current_line = word\n        else\n            current_line *= \" \" * word\n        end\n    end\n    push!(wrapped_lines, current_line)\n    return join(wrapped_lines, \"\\n\")\nend\n\n# Example\nexample_str = \"This is a long string that needs to be wrapped to fit within a given text width.\"\nprint(wrap_string(example_str, text_width=30))\n```\n\nThis function works by splitting the input string into words, and then iterating through these words. It keeps a running total of the current line length, and when a new word would push the line length over the maximum text width, it appends the current line to the `wrapped_lines` array, and starts a new line with the current word. After all the words have been processed, it appends the last line to the `wrapped_lines` array and joins them all together with newline characters to produce the final wrapped string.\n\nThe function returns an `AbstractString` to allow for flexibility in the input type, and uses general type annotations for the input arguments to ensure clarity and allow for multiple dispatch on different types.\n\nThe provided example shows the function in action, where it wraps a long string at a text width of 30 characters.","status":200,"tokens":[366,401],"elapsed":4.548588875,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":321110579,"sample_id":null,"_type":"aimessage"}]