[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"1. Recall Julia snippets that will be useful for this Task:\n- Split a string into words: `split(string)`\n- Check the length of a string: `length(string)`\n- Concatenate strings with a newline: `join([string1, string2], \"\\n\")`\n- Add a new line after a certain number of characters without breaking a word: ` chop(string, head=n, tail=0)` where `n` is the number of characters to keep before the newline.\n\n2. Solve the Task:\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int=10)\n    words = split(text)\n    lines = AbstractString[]\n    current_line = \"\"\n\n    for word in words\n        # Check if adding the next word would exceed the text width\n        if length(current_line) + length(word) + (current_line == \"\" ? 0 : 1) > text_width\n            # If so, append the current line to lines and start a new line\n            push!(lines, current_line)\n            current_line = word\n        else\n            # Otherwise, add the word to the current line\n            current_line *= (current_line == \"\" ? \"\" : \" \") * word\n        end\n    end\n\n    # Add the last line if it's not empty\n    if current_line != \"\"\n        push!(lines, current_line)\n    end\n\n    # Join all lines with a newline character\n    return join(lines, \"\\n\")\nend\n\n# Example usage:\nexample_text = \"This is an example of a string that needs to be wrapped according to a specified text width.\"\nwrapped_text = wrap_string(example_text, text_width=20)\nprintln(wrapped_text)\n```\n\n3. Double-check that the solution is correct:\n- Ensure that words are not split across lines.\n- Verify that the maximum text width is respected.\n- Confirm that the last line is added if it contains text.\n- Test the function with the provided example and other test cases to ensure it behaves as expected.\n\nThe provided function `wrap_string` should now correctly wrap a given string according to the specified maximum text width, without breaking words across lines. The example usage demonstrates how to call the function and print the result.","status":200,"tokens":[371,542],"elapsed":17.726740833,"cost":0.0,"log_prob":null,"finish_reason":"eos","run_id":324605894,"sample_id":null,"_type":"aimessage"}]