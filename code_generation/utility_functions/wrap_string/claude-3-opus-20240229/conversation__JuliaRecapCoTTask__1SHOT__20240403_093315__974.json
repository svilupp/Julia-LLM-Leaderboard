[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the solution to wrap a string based on a maximum text width:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int=10)\n    words = split(text)\n    lines = String[]\n    current_line = \"\"\n\n    for word in words\n        if length(current_line) + length(word) â‰¤ text_width\n            current_line *= word * \" \"\n        else\n            push!(lines, rstrip(current_line))\n            current_line = word * \" \"\n        end\n    end\n\n    if !isempty(current_line)\n        push!(lines, rstrip(current_line))\n    end\n\n    return join(lines, \"\\n\")\nend\n```\n\nExplanation:\n1. We split the input `text` into individual words using `split(text)`. \n2. Initialize an empty array `lines` to store the wrapped lines.\n3. Initialize an empty string `current_line` to build each line.\n4. We iterate over each `word`:\n   - If adding the current `word` to `current_line` doesn't exceed `text_width`, we append it.\n   - Else, we add the `current_line` to `lines`, and start a new line with the current `word`.\n5. After the loop, if there is any remaining content in `current_line`, we add it to `lines`.\n6. Finally, we join all the lines with newline characters `\\n` and return the result.\n\nHere's an example usage:\n\n```julia\ntext = \"The quick brown fox jumps over the lazy dog\"\nwrapped_text = wrap_string(text, text_width=20)\nprintln(wrapped_text)\n```\n\nOutput:\n```\nThe quick brown fox\njumps over the lazy\ndog\n```\n\nThe function uses an `AbstractString` to accept any string type. It has a keyword argument `text_width` with a default value of 10. \n\nThe key steps are splitting the string into words, iterating to build lines within the width limit, and finally joining the lines back into a single string with newlines.\n\nLet me know if you have any other questions!","status":200,"tokens":[345,497],"elapsed":24.542588083,"cost":0.042449999999999995,"log_prob":null,"finish_reason":"end_turn","run_id":20132,"sample_id":null,"_type":"aimessage"}]