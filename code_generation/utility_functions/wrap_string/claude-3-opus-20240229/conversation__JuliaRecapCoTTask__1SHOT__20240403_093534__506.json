[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here are some useful snippets for this task:\n\n```julia\n# Split a string into words\nsplit(str::AbstractString)\n\n# Join an array of strings with a separator\njoin(arr::AbstractArray{<:AbstractString}, sep::AbstractString)\n\n# Get the length of a string\nlength(str::AbstractString)\n```\n\nSolution:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int=10)\n    words = split(text)\n    lines = String[]\n    current_line = \"\"\n    \n    for word in words\n        if length(current_line) + length(word) <= text_width\n            current_line *= word * \" \"\n        else\n            push!(lines, strip(current_line))\n            current_line = word * \" \"\n        end\n    end\n    push!(lines, strip(current_line))\n    \n    return join(lines, \"\\n\")\nend\n```\n\nThe key steps are:\n\n1. Split the input `text` into an array of `words`\n2. Initialize an empty array `lines` to hold the wrapped lines \n3. Iterate through each `word`:\n    - If adding the `word` to the `current_line` doesn't exceed `text_width`, append it\n    - Otherwise, push the `current_line` to `lines`, and start a new `current_line` with this `word`\n4. After the loop, push the final `current_line` to `lines`\n5. Join the array of `lines` with newline `\"\\n\"` as the separator and return the result\n\nExample:\n\n```julia\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nprintln(wrap_string(text))\n```\n\nOutput:\n```\nLorem\nipsum\ndolor sit\namet,\nconsectetur\nadipiscing\nelit.\n```\n\nThe function wraps the long input text to a maximum width of 10 characters per line by default. This can be changed by passing a different `text_width` keyword argument value.\n\nLet me know if you have any other questions!","status":200,"tokens":[345,476],"elapsed":22.234387375,"cost":0.040874999999999995,"log_prob":null,"finish_reason":"end_turn","run_id":18067,"sample_id":null,"_type":"aimessage"}]