[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is a solution for the `wrap_string` function in Julia:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int=10)\n    words = split(text)\n    lines = String[]\n    current_line = \"\"\n    \n    for word in words\n        if length(current_line) + length(word) <= text_width\n            current_line *= isempty(current_line) ? word : \" \" * word\n        else\n            push!(lines, current_line)\n            current_line = word\n        end\n    end\n    \n    if !isempty(current_line)\n        push!(lines, current_line)\n    end\n    \n    return join(lines, \"\\n\")\nend\n```\n\nKey steps:\n\n1. Split the input `text` into individual `words` using `split`.\n2. Initialize an empty array `lines` to store the wrapped lines and `current_line` to build each line.\n3. Iterate over each `word`:\n   - If adding the `word` to `current_line` doesn't exceed `text_width`, append it to `current_line` with a leading space if `current_line` is not empty.\n   - If adding the `word` exceeds `text_width`, push `current_line` to `lines` and start a new line with the current `word`.\n4. After the loop, if there is any remaining content in `current_line`, push it to `lines`.\n5. Join the `lines` array with newline characters `\"\\n\"` and return the result.\n\nThe function uses `AbstractString` for the `text` parameter to accept any string type. The `text_width` has a default value of 10 but can be overridden.\n\nHere's an example usage:\n\n```julia\ntext = \"This is a long text that needs to be wrapped.\"\nwrapped_text = wrap_string(text, text_width=15)\nprintln(wrapped_text)\n```\n\nOutput:\n```\nThis is a long\ntext that needs\nto be wrapped.\n```\n\nThe text is wrapped at a maximum width of 15 characters per line.","status":200,"tokens":[344,495],"elapsed":21.254668791,"cost":0.042284999999999996,"log_prob":null,"finish_reason":"end_turn","run_id":-164,"sample_id":null,"_type":"aimessage"}]