[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Certainly! I'll write a function `wrap_string` that wraps text based on a specified maximum width. Then, I'll provide an example of how to use it.\n\nHere's the implementation:\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    lines = String[]\n    current_line = \"\"\n    \n    for word in words\n        if isempty(current_line)\n            current_line = word\n        elseif length(current_line) + length(word) + 1 <= text_width\n            current_line *= \" \" * word\n        else\n            push!(lines, current_line)\n            current_line = word\n        end\n    end\n    \n    if !isempty(current_line)\n        push!(lines, current_line)\n    end\n    \n    return join(lines, \"\\n\")\nend\n```\n\nNow, let's break down the function and provide an example:\n\n1. The function takes two parameters:\n   - `text::AbstractString`: The input text to be wrapped\n   - `text_width::Int=10`: The maximum width for each line (default is 10)\n\n2. We split the input text into words.\n\n3. We iterate through the words, building each line:\n   - If the current line is empty, we start with the current word.\n   - If adding the current word (plus a space) doesn't exceed the `text_width`, we append it to the current line.\n   - If adding the word would exceed the `text_width`, we add the current line to our `lines` array and start a new line with the current word.\n\n4. After the loop, we add any remaining text in `current_line` to the `lines` array.\n\n5. Finally, we join the lines with newline characters and return the result.\n\nHere's an example of how to use the `wrap_string` function:\n\n```julia\n# Example usage\ntext = \"This is a long string that needs to be wrapped to fit within a specified width.\"\nwrapped_text = wrap_string(text, 15)\nprintln(wrapped_text)\n```\n\nOutput:\n```\nThis is a long\nstring that\nneeds to be\nwrapped to fit\nwithin a\nspecified\nwidth.\n```\n\nIn this example, we set the `text_width` to 15 characters. The function wraps the text, ensuring that each line is no longer than 15 characters (including spaces), except when a single word is longer than the specified width.\n\nYou can adjust the `text_width` parameter to change the wrapping behavior. For instance, using the default value of 10:\n\n```julia\nwrapped_text_default = wrap_string(text)\nprintln(wrapped_text_default)\n```\n\nOutput:\n```\nThis is a\nlong\nstring\nthat needs\nto be\nwrapped to\nfit within\na\nspecified\nwidth.\n```\n\nThis function provides a flexible way to wrap text based on a specified width, which can be useful for formatting output or preparing text for display in constrained spaces.","status":200,"tokens":[344,706],"elapsed":10.486129917,"cost":0.011622,"log_prob":null,"finish_reason":"end_turn","run_id":-21042,"sample_id":null,"_type":"aimessage"}]