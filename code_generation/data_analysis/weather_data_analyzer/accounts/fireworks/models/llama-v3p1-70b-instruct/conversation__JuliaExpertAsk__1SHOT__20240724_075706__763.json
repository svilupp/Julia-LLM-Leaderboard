[{"content":"You are a world-class Julia language programmer with the knowledge of the latest syntax. Your communication is brief and concise. You're precise and answer only when you're confident in the high quality of your answer.","variables":[],"_type":"systemmessage"},{"content":"# Question\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.","variables":["ask"],"_type":"usermessage"},{"content":"```python\nimport numpy as np\nfrom collections import namedtuple\n\ndef weather_data_analyzer(temps):\n    \"\"\"\n    Analyzes the given temperature data and returns a named tuple containing \n    the average, max, min temperatures, and a trend.\n\n    Args:\n        temps (list): A list of daily temperature data.\n\n    Returns:\n        named_tuple: A named tuple containing the average, max, min temperatures, \n        and a trend.\n    \"\"\"\n    \n    # Check if the input list is empty\n    if not temps:\n        return Result(average=None, max=None, min=None, trend=None)\n\n    # Convert the list to a numpy array\n    temps = np.array(temps)\n    \n    # Calculate the average temperature\n    average = np.mean(temps)\n    \n    # Calculate the maximum temperature\n    max_temp = np.max(temps)\n    \n    # Calculate the minimum temperature\n    min_temp = np.min(temps)\n    \n    # Determine the trend\n    if len(temps) == 1:\n        trend = \"stable\"\n    elif np.all(np.diff(temps) > 0):\n        trend = \"increasing\"\n    elif np.all(np.diff(temps) < 0):\n        trend = \"decreasing\"\n    else:\n        trend = \"stable\"\n    \n    # Return the results as a named tuple\n    return Result(average=average, max=max_temp, min=min_temp, trend=trend)\n\n# Create a named tuple type\nResult = namedtuple('Result', ['average', 'max', 'min', 'trend'])\n```","status":200,"tokens":[181,323],"elapsed":2.383683834,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":988835741,"sample_id":null,"_type":"aimessage"}]