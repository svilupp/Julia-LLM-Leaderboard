[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Data\n\nweather_data_analyzer([25, 27, 23, 20, 22])","variables":["task","data"],"_type":"usermessage"},{"content":"1. Think through the approach step by step:\n\n   a. Define the function `weather_data_analyzer` that takes a list of temperatures as an argument.\n   b. Check if the list is empty. If it is, return a named tuple with all values set to `nothing`.\n   c. If the list is not empty, calculate the average, maximum, and minimum temperatures using the `mean`, `maximum`, and `minimum` functions from the `Statistics` package.\n   d. Determine the temperature trend by comparing the first and last elements of the list. If they are equal, the trend is `:stable`. If the first element is smaller than the last, the trend is `:increasing`. Otherwise, the trend is `:decreasing`.\n   e. Return the results in a named tuple.\n\n2. Write any functions and other code needed:\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (","status":200,"tokens":[257,200],"elapsed":3.533509542,"cost":0.0007312,"log_prob":null,"finish_reason":"length","run_id":-1649524913,"sample_id":null,"_type":"aimessage"}]