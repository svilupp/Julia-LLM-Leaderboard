[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\n(; average, max, min, trend) = weather_data_analyzer(temps :: Vector{<:Number}) = (\n    average = mean(temps),\n    max = maximum(temps),\n    min = minimum(temps),\n    trend = measure_trend(temps)\n)\n\nmeasure_trend(temps :: Vector{<:Number}) = (\n    trend = nothing # preallocate to ensure correct value type in result\n    if length(temps) > 1\n        trend_sign = sign.(diff(temps))\n        if all(trend_sign .> 0)\n            trend = :increasing\n        elseif all(trend_sign .< 0)\n            trend = :decreasing\n        end\n        if trend = nothing\n            trend = :stable\n        end\n    end\n    trend\n)\n```","status":200,"tokens":[0,0],"elapsed":4.104356208,"_type":"aimessage"}]