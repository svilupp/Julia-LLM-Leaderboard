[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"function extract_julia_code(md::AbstractString)\n    lines = split(md, \"\\n\")\n    sb = IOBuffer()\n    \n    in_block = false\n    comment = \"\"\n    \n    for l in lines\n        if startsWith(l, \"# [\") || endsWith(l, \"Julia]\")\n            in_block = !in_block\n            comment = l[4:end-1]\n        elseif in_block && startswith(comment, \"julia\")\n            write(sb, \"\")     \n            write(sb, l[4:end-1])\n        end\n    end\n    \n    code_str = String(take!(sb))\n    return code_str\nend","status":200,"tokens":[400,168],"elapsed":2.940796875,"cost":0.0005112,"log_prob":null,"finish_reason":"stop","run_id":1668991997,"sample_id":null,"_type":"aimessage"}]