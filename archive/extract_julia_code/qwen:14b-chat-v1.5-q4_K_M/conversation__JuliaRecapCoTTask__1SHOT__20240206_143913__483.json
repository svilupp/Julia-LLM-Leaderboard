[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md)\n    lines = split(String(md), '\\n'))\n    \n    code_blocks = Any[]\n    current_block = \"\"\n    \n    for line in lines\n        if line[1] == '#' || isempty(line) # skip comments and empty lines\n            else\n                if occursin(r\"^```\"), line) # start of a new code block\n                    push!(code_blocks, current_block)\n                    current_block = \"\"\n                end\n\n                current_block *= \"$line\\n\"\n            end\n        end\n    end\n    \n    push!(code_blocks, current_block) # add the last code block if there's one\n    joined_code = join(code_blocks, \"\\n\")\n    \n    return joined_code\nend\n```","status":200,"tokens":[0,157],"elapsed":2.517575397,"_type":"aimessage"}]