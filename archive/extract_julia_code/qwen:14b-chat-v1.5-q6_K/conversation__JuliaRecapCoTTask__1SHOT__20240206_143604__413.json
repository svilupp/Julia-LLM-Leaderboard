[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Given the task and special instructions, I will implement the `extract_julia_code` function following the guidelines provided.\n\nHere's the function definition:\n```julia\nfunction extract_julia_code(md::String)\n    code_blocks = split(md, r\"(?m)^```(.*?)^```\")...)\n    \n    cleaned_code_blocks = String[]\n    for block in code_blocks\n        if !isempty(block) && block[1] != '#'\n            # Remove fences and join with newline\n            cleaned_code_blocks push! (strip[block], \"\\n\"))\n        end\n    end\n    \n    # Join the code blocks\n    final_code = join(cleaned_code_blocks, \"\\n\"))\n    \n    return final_code\nend\n```\nThis function `extract_julia_code` follows the guidelines provided and should handle the task as described.","status":200,"tokens":[8,171],"elapsed":3.319186626,"_type":"aimessage"}]