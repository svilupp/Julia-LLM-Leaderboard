[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Given the task and special instructions, here's the `extract_julia_code` function that adheres to the guidelines:\n\n```julia\nfunction extract_julia_code(md)\n    code_blocks = split(md, r\"^(?:\\s*~{3,}\\s*)?\\n```\")[[2:end]]\n    \n    cleaned_code_blocks = []\n    prev_end = 0\n\n    for block in code_blocks\n        start = findfirst(r\"```\", block)) + 3\n        end = prev_end + start - 3 # Subtract fence characters\n        if start <= end\n            cleaned_code_blocks[end] += block[start:end]\n        else\n            error(\"Invalid code block structure\")\n        end\n\n        prev_end = end\n    end\n\n    return join(cleaned_code_blocks, \"\\n\"))\nend\n```\n\nThis function first splits the markdown document into code blocks based on the `r\"^(?:\\s*~{3,}\\s*)?\\n```\"` regular expression pattern. It then cleans and concatenates these code blocks into a single string with newline characters between blocks.\n\nPlease note that if there are any special instructions not covered in this answer, please provide them for further adjustments.","status":200,"tokens":[0,251],"elapsed":4.829471892,"_type":"aimessage"}]