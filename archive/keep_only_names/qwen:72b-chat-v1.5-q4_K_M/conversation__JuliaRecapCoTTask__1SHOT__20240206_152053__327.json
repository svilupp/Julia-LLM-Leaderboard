[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `keep_only_names` which iterates over the provided list of words (`words`) and removes all words that do not start with a capital letter (eg, remove \"dog\" but keep \"Dog\").\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Since there are no special instructions, I'll proceed with the standard approach to solving this problem in Julia.\n\nHere's how you can create a function `keep_only_names` that performs the task described:\n\n```julia\nfunction keep_only_names(words::AbstractVector{<:AbstractString})::Vector{String}\n    kept_words = String[]\n    \n    for word in words\n        if startswith(word, uppercase(word[1]))))\n            push!(kept_words, word)\n        end\n    end\n    \n    return kept_words\nend\n```\n\nNow you can call the `keep_only_names` function with a list of words to filter out non-names.\n\nExample usage:\n\n```julia\nwords = [\"dog\", \"Cat\", \"bird\", \"Horse\"]\nkept_names = keep_only_names(words)\nprintln(kept_names)  # Output: [\"Cat\", \"Horse\"]\n```","status":200,"tokens":[0,183],"elapsed":10.666257243,"_type":"aimessage"}]