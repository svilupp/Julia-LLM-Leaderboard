[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width=10)\n    words = split(text, r\"\\s+\"))\n    wrapped_text = \"\"\n\n    for word in words\n        if wrap_needed(wrapped_text, text_width, length(word)))\n            push!(wrapped_text, \"\\n\")\n        end\n\n        push!(wrapped_text, word * \" \")\n    end\n\n    return trim_end(wrapped_text)\nend\n\n# Helper function to check if a line needs to be wrapped\nfunction wrap_needed(line, text_width, word_length)\n    current_line_width = sum(map(length, split(line, r\"\\n\"), 1))))\n    return current_line_width + word_length > text_width\nend\n\n# Example usage:\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse sollicitudin augue id ullamcorper. Nullam at metus ac lectus facilisis pulvinar.\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```\n\nThis function `wrap_string` takes a text and a maximum line width as input. It iterates over words, wrapping the line when necessary to maintain the specified text_width.\n\nThe provided example demonstrates how to use this function with a sample text. The wrapped text will be printed to the console.","status":200,"tokens":[0,264],"elapsed":5.075370603,"_type":"aimessage"}]