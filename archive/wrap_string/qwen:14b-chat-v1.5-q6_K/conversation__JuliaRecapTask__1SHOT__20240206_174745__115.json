[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10)\n    # Split the input text into words\n    words = split(text)\n\n    # Initialize variables\n    lines = []\n    current_line = []\n\n    # Iterate over words, adding newlines as needed\n    for word in words\n        if !isempty(current_line) && sum(map(length, current_line))) + length(word) > text_width\n            push!(lines, join(current_line, \" \"))))\n            current_line = [word]\n        else\n            push!(current_line, word)\n        end\n    end\n\n    # Add the last line if needed\n    if !isempty(current_line)\n        push!(lines, join(current_line, \" \"))))\n    end\n\n    # Return the wrapped text as a string\n    return \"\\n\".join(lines)\nend\n\n# Example usage:\ntext = \"This is a very long sentence that we want to wrap onto multiple lines.\"\nwrapped_text = wrap_string(text, 20)\n\nprintln(wrapped_text)\n```\nIn this example, the `wrap_string` function takes a text and an optional `text_width`. It wraps the text into new lines when the given width is exceeded. The example usage shows how to use the function with a specified `text_width`.","status":200,"tokens":[325,267],"elapsed":5.263451392,"_type":"aimessage"}]