[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"To solve this task, we'll write the `wrap_string` function that takes a `words` vector and an optional `text_width`. The function will return the wrapped string.\n\nHere's the code for the `wrap_string` function:\n```julia\nfunction wrap_string(words, text_width = 10)\n    lines = []\n    current_line = []\n\n    for word in words\n        if length(join(current_line, \" \")) + length(word) > text_width\n            end\n\n        push!(current_line, word)\n    end\n\n    if !isempty(current_line)\n        push!(lines, join(current_line, \" \")))\n    end\n\n    return lines\nend\n```\nNow let's provide an example to demonstrate the usage of `wrap_string`:\n```julia\nwords = [\"This\", \"is\", \"a\", \"long\", \"sentence\", \"that\", \"we\", \"are\", \"wrapping.\"]\ntext_width_example = 15\n\nexample_output = wrap_string(words, text_width_example)\nprintln(\"Wrapped String:\")\nfor line in example_output\n    println(line)\nend\n```\nThis code will output a wrapped string based on the `text_width_example` provided.","status":200,"tokens":[0,249],"elapsed":4.778099611,"_type":"aimessage"}]