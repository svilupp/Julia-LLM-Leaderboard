[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the implementation of the `wrap_string` function based on the provided guidelines:\n\n```julia\nfunction wrap_string(text, text_width = 10)\n    words = split(text, ' ')\n    lines = String[]\n    current_line_length = 0\n\n    for word in words\n        if current_line_length + length(word) > text_width\n            # Wrap to new line\n            push!(lines, string(current_line), \" \"))\n            current_line_length = length(word)\n        else\n            # Add word to current line\n            current_line_length += length(word)\n        end\n    end\n\n    # Add last line if it's not empty\n    if !isempty(current_line)\n        push!(lines, string(current_line), \" \"))\n    end\n\n    return join(lines, \"\\n\")\nend\n```\n\nExample usage:\n\n```julia\ntext = \"\"\"\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla facilisi. Sed nec risus ac quam congue dictum.\n\"\"\"\n\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```","status":200,"tokens":[0,222],"elapsed":4.254781691,"_type":"aimessage"}]