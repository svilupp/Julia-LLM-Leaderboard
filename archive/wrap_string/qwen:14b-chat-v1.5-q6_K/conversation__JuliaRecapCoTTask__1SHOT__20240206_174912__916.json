[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width::Int=10)\n    lines = String[]\n    current_line_length = 0\n\n    for word in split(text, r\"\\s+\"))\n        new_line_length = current_line_length + length(word) + 1 # Adding space between words\n\n        if new_line_length > text_width\n            push!(lines, string(current_word)))\n            current_line_length = length(string(word)) + 1 # Updating line length for next word\n        else\n            current_word = string(current_word, \" \", word))\n        end\n    end\n\n    if !isempty(current_word)\n        push!(lines, current_word)\n    end\n\n    return join(lines, \"\\n\")\nend\n```\n\nExample usage:\n\n```julia\ntext = \"This is a very long sentence that exceeds the text width limit.\"\nwrapped_text = wrap_string(text, 20)\nprintln(wrapped_text)\n```\n\nOutput (with line breaks):","status":200,"tokens":[0,203],"elapsed":3.888403212,"_type":"aimessage"}]