[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the implementation of the `wrap_string` function, along with an example usage.\n\n```julia\nfunction wrap_string(text, text_width = 10)\n    lines = String[]\n    line = String()\n    \n    for word in split(String(text)), r'\\s+')\n        if !isempty(line) && (sizeof(line) + sizeof(word)) > text_width)\n            push!(lines, line)\n            line = String()\n        end\n        \n        if isempty(line)\n            line = word\n        else\n            line *= \" \" * word\n        end\n    end\n    \n    # Add the last line if it exists\n    if !isempty(line)\n        push!(lines, line)\n    end\n    \n    return join(lines, \"\\n\")\nend\n\n# Example usage\ntext = \"\"\"\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vitae risus auctor, aliquam odio ac, tincidunt mi. Curabitur id arcu vel lacus luctus malesuada.\n\nSuspendisse potenti. Donec facilisis efficitur metus, et rhoncus ligula tempus in. Aliquam erat volutpat. Ut vitae neque at est cursus suscipit.\n\"\"\"\n\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```\n\nThe `wrap_string` function takes a text and a maximum `text_width`, wrapping the words when the width limit is reached. The example usage demonstrates how to use the function with a given text.","status":200,"tokens":[0,310],"elapsed":5.96728462,"_type":"aimessage"}]