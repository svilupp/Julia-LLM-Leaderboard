[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width::Int=10)\n    # Split the text into words\n    words = split(text)\n\n    # Initialize variables for wrapping\n    current_line = \"\"\n    line_count = 1\n\n    # Iterate through the words and build lines\n    for word in words\n        if length(current_line) + length(word) + 1 <= text_width  # Add space for word separator\n            current_line *= \" \"  # Append a space to separate words\n            current_line *= word  # Append the word to the line\n        else\n            # End of line, add it to the result and start a new line\n            push!(result_lines, current_line)\n            current_line = word  # Start with just the next word\n            line_count += 1\n        end\n    end\n\n    # Add the last line to the result\n    push!(result_lines, current_line)\n\n    # Join the lines into a single string and return it\n    return join(result_lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"This is a long sentence that needs to be wrapped. It will exceed the specified text width.\"\nwrapped_text = wrap_string(text, 20)\nprintln(wrapped_text)\n```\nIn this example, the `wrap_string` function takes a long text and wraps it at a maximum text_width of 20 characters per line. The output is then printed to the console.","status":200,"tokens":[0,305],"elapsed":5.855258822,"_type":"aimessage"}]