[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width=10)\n    # Split the input text into words\n    words = split(text)\n\n    # Initialize an empty array to store wrapped lines\n    wrapped_lines = []\n\n    # Iterate over the words and wrap the line if necessary\n    for (i, word) in enumerate(words)\n        # Calculate the current line width, including the space for the next word\n        curr_width = i > 0 ? prev_word_width + space_after_word : text_width\n\n        # Check if the addition of this word would exceed the maximum text width\n        if curr_width + length(word) > text_width\n            push!(wrapped_lines, join(words[1:i-1]], \" \") * \"\\n\")\n            # Reset the current line and word counts\n            words = words[i:end]\n            i = 0\n            prev_word_width = 0\n        end\n\n        # Keep track of the previous word's width for wrapping purposes\n        if i > 0\n            prev_word_width = length(words[i-1]])\n        end\n\n        # Add a space after each word, except the last one\n        if i < length(words) - 1\n            push!(words, \" \")\n        end\n    end\n\n    # If there's any remaining unwrapped words, add them to the last line\n    if !isempty(words)\n        push!(wrapped_lines, join(words, \" \"), \" \") * \"\\n\")\n    end\n\n    # Return the final wrapped lines as a single string\n    return join(wrapped_lines)\n```","status":200,"tokens":[0,328],"elapsed":5.246250662,"_type":"aimessage"}]