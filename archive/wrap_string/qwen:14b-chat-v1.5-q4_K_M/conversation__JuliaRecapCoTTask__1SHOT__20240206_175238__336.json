[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10)\n    # Split the input text into words\n    words = split(text)\n\n    # Initialize variables for line and width\n    current_line = \"\"\n    current_width = 0\n\n    # Iterate over the words\n    for word in words\n        # Add a space if not the first word\n        (current_line *= current_width > 0 ? \" \" : \"\") << word\n\n        # Update the current line width\n        current_width += length(word) + 1 # plus one for the space between words\n\n        # Check if the line exceeds the text width\n        if current_width > text_width\n            # Split the line at the last whitespace before the text width limit\n            line_break_index = findprev(isspace, reverse(current_line))) - 1\n            wrapped_lines = split(current_line[1:line_break_index]] => \"\\n\")\n\n            # Replace the current line with the wrapped lines\n            current_line = join(wrapped_lines..., word[current_break_index + 1:end]]) * (current_width > text_width ? \" \" : \"\")\n            \n            # Reset the current line width\n            current_width = length(word) + 1\n        end\n    end\n\n    return current_line\nend\n\n# Example usage\ntext = \"\"\"\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nSed nec tellus facilisis justo pretium in non tortor.\n\"\"\"\nwrapped_text = wrap_string(text, text_width = 20)\nprintln(wrapped_text)\n```\nIn this example, the `wrap_string` function will iterate over the words in the input text. If the line exceeds the specified `text_width`, it will split the line and continue on a new line.","status":200,"tokens":[0,365],"elapsed":5.846223654,"_type":"aimessage"}]