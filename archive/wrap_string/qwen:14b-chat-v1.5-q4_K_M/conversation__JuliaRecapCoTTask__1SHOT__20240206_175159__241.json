[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the `wrap_string` function that adheres to the provided guidelines and special instructions:\n\n```julia\nfunction wrap_string(text, text_width = 10)\n    # Special Instruction: Ensure words are split correctly (e.g., \"word1 word2\" instead of \"word1 word2\").\n    \n    # Split text into individual words\n    words = split(text, r\"\\b\")\n    \n    # Initialize an empty array to store wrapped lines\n    wrapped_lines = []\n    \n    # Iterate over the words\n    for i in 1:sum(map(length, words))))\n        if i > length(words[end]) + sum(map(length, words[1:end-1]])))\n            push!(wrapped_lines, join(words[end], \" \"))))\n            words = words[1:end-1]]\n            continue\n        end\n        \n        current_word = words[end]\n        \n        # Check if exceeding text_width, wrap the line and append to wrapped_lines\n        if length(current_word) + sum(map(length, words[1:end-1]])))) > text_width\n            push!(wrapped_lines, join(words[end], \" \"))))            \n            words = words[1:end-1]]\n        else\n            # Add the current word to the current line\n            push!(current_word, \" \")\n        end\n    end\n    \n    # Join all wrapped lines into a single string\n    return join(wrapped_lines, \"\\n\"), \" \")\nend\n\n# Example usage:\ntext = \"This is a very long sentence that should be wrapped according to the specified text width.\"\nwrapped_text = wrap_string(text, 20)\nprintln(wrapped_text)\n```\nIn this example, the `wrap_string` function takes a long string and wraps it based on the specified `text_width`. The result is then printed.","status":200,"tokens":[8,373],"elapsed":5.993267528,"_type":"aimessage"}]