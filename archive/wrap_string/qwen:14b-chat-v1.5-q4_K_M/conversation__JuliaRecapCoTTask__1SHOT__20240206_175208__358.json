[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width=10)\n    lines = []\n    current_line = \"\"\n    \n    for word in split(text, r\"\\s+\"))\n        # Calculate the new line length after adding the word\n        new_line_length = length(current_line) + 1 + (length(word) > text_width ? 2 : 1))  # Add space for word and newline if needed\n\n        # Check if we need to start a new line\n        if new_line_length > text_width\n            push!(lines, current_line))\n            current_line = \"\"\n        else\n            current_line *= \" \" * word  # Add space between words\n        end\n    end\n    \n    # Add the last line if not empty\n    if !isempty(current_line)\n        push!(lines, current_line)\n    end\n    \n    return join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"This is a very long sentence that exceeds the text width limit by quite a bit.\"\nwrapped_text = wrap_string(text, 20)\nprintln(wrapped_text)\n```\nIn this example, the `wrap_string` function takes a long sentence and wraps it to a maximum line width of 20 characters. The resulting wrapped text is then printed.","status":200,"tokens":[0,265],"elapsed":4.231354707,"_type":"aimessage"}]