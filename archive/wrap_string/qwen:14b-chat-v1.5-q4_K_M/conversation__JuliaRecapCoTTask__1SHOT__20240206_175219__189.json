[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width=10)\n    words = split(text, r\"\\s+\"))\n    wrapped_lines = []\n\n    current_line = \"\"\n    for word in words\n        if occursin(r\"[^\\s\\d]\", word) || length(current_line) + (length(word) > 2 ? 4 : 2)) > text_width\n            else\n                push!(current_line, word)\n            end\n        end\n    end\n\n    # Add newline at the end of the last line if necessary\n    if !isempty(current_line) && length(current_line) + 1 <= text_width\n        current_line *= \" \"\n        push!(current_line, \"\\n\"))\n    end\n\n    push!(wrapped_lines, current_line)\n    return join(wrapped_lines, \"\\n\"))\nend\n\n# Example usage:\ntext = \"This is a very long sentence that we need to wrap into multiple lines. Let's see how it works.\"\nwrapped_text = wrap_string(text, 20)\nprintln(wrapped_text)\n```\n```","status":200,"tokens":[0,221],"elapsed":3.52110339,"_type":"aimessage"}]