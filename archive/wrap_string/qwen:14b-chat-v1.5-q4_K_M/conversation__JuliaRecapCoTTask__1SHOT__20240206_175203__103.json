[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width=10)\n    # Split the input text into individual words\n    words = split(text)\n\n    # Initialize variables to track line and width\n    current_line = 1\n    current_width = 0\n\n    # Wrap the text by iterating over the words\n    wrapped_text = \"\"\n    for word in words\n        if current_width + length(word) > text_width\n            # Add a new line and reset the width\n            wrapped_text *= \"\\n\"\n            current_line += 1\n            current_width = 0\n        end\n\n        # Append the word to the current line\n        current_width += length(word)\n        wrapped_text *= word * \" \"\n    end\n\n    # Remove trailing whitespace from the final line\n    wrapped_text = replace(wrapped_text, r\"\\s+$\", \"\"))\n\n    return wrapped_text\nend\n\n# Example usage\ntext = \"\"\"\nThis is a long sentence that we want to wrap.\nIt contains multiple words and our goal is to split it into lines.\n\"\"\"\nwrapped_example = wrap_string(text)\nprintln(\"Wrapped text:\")\nprintln(wrapped_example)\n```\n```","status":200,"tokens":[0,241],"elapsed":3.840532352,"_type":"aimessage"}]