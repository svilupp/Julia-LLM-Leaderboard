[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on your instructions, here's the implementation of the `wrap_string` function:\n\n```julia\nfunction wrap_string(text, text_width = 10)\n    # Split text into words\n    words = split(text)\n\n    # Wrap the string by adding new lines when necessary\n    wrapped_text = \"\"\n    current_line_length = 0\n\n    for word in words\n        # Calculate the length of the current word\n        word_length = length(word)\n\n        # Check if adding the current word to the line would exceed the text width\n        if current_line_length + word_length <= text_width\n            # If not, just add the word to the line\n            wrapped_text *= word * \" \"\n            current_line_length += word_length\n        else\n            # If yes, wrap the line by adding a new line and starting a new line with the word\n            wrapped_text = \"$(wrapped_text)\\n$word\"\n            current_line_length = length(word)\n        end\n    end\n\n    return wrapped_text\nend\n```\n\nHere's an example usage of the `wrap_string` function:\n\n```julia\ntext = \"This is a very long sentence that needs to be wrapped for better readability.\"\nwrapped_text = wrap_string(text, 15)\n\nprintln(wrapped_text)\n```\n\nThe output will be a wrapped string with new lines added at appropriate positions.","status":200,"tokens":[0,283],"elapsed":4.516559451,"_type":"aimessage"}]