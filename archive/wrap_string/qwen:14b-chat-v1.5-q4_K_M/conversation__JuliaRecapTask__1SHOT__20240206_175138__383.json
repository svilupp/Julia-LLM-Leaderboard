[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the implementation of the `wrap_string` function, considering the provided guidelines:\n```julia\nfunction wrap_string(text, text_width::Int = 10))\n    words = split(text, r\"\\s+\"))\n    wrapped_text = \"\"\n\n    for (i, word) in enumerate(words)\n        if i > 0 && (end-of-line := occursin(r\"^\\s*$\", wrapped_text[end-2:end])) || width_of_word := get_width(word) + 1; end_of_line && width_of_word <= text_width) ||\n               length(wrapped_text) + length(word) + 1 â‰¤ text_width\n        )\n            # No newline, add word to existing line\n            wrapped_text *= word * (i < length(words) - 1 ? \" \" : \"\"))\n        else\n            # Newline and wrap the current line\n            wrapped_text *= \"\\n\"\n            wrapped_text += word\n        end\n    end\n\n    return wrapped_text\nend\n```\nExample usage:\n```julia\ntext = \"\"\"\nThis is a test string that will be wrapped according to the specified text width.\n\"\"\"\n\nwrapped_text = wrap_string(text, 20)\nprintln(wrapped_text)\n```\nThe output will be a wrapped string with newlines at the specified `text_width`.","status":200,"tokens":[0,270],"elapsed":4.316687125,"_type":"aimessage"}]