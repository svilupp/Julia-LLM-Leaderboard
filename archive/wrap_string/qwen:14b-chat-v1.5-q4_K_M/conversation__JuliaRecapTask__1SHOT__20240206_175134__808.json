[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(words, text_width = 10)\n    lines = String[]\n    current_line = \"\"\n\n    for word in words\n        if occursin(r\"\\s+$\", current_line)) && !isempty(current_line)\n            push!(lines, current_line)\n            current_line = \"\"\n        end\n\n        # Check text width before adding the word\n        remaining_space = text_width - (end-of-line adjustment + length_of_current_word))\n        if length(current_line) + length(word) <= remaining_space\n            current_line *= \" \"\n            append!(current_line, word)\n        else\n            push!(lines, current_line)\n            current_line = word\n        end\n    end\n\n    # Add the last line if it's not empty\n    if !isempty(current_line)\n        push!(lines, current_line)\n    end\n\n    return join(lines, \"\\n\")\nend\n\n# Example usage:\nwords = [\"Lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet,\", \"consectetur\", \"adipiscing\", \"elit.\"]\ntext_width = 12\nwrapped_text = wrap_string(words, text_width)\nprintln(wrapped_text)\n```\nThis code defines the `wrap_string` function that takes a list of words and a maximum text width. It iterates over the words, wrapping lines when the maximum width is exceeded.\n\nThe provided example creates an array of words, sets a text width, calls the `wrap_string` function with these inputs, and prints the resulting wrapped text.","status":200,"tokens":[0,319],"elapsed":5.104049017,"_type":"aimessage"}]