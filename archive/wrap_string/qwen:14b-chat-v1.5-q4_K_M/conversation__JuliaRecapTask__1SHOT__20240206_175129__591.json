[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the `wrap_string` function that follows the provided guidelines:\n\n```julia\nfunction wrap_string(text, text_width = 10)\n    words = split(text, r\"\\s+\"))\n    wrapped_text = \"\"\n\n    for (i, word) in enumerate(words)\n        if i > 0 && (end-of-line-found(i - 1), words) || (current_line_length(i, words) + length(word)) > text_width))\n            wrapped_text *= \"\\n\"\n        end\n\n        wrapped_text *= word * (i == lastindex(words)))\n    end\n\n    return wrapped_text\nend\n\n# Helper functions to check line width and end of line\nfunction current_line_length(line_index, words)\n    return sum(length(word) for word in words[line_index:end]])\nend\n\nfunction end_of_line_found(line_index, words)\n    return (line_index + 1 == length(words)) ||\n            (words[line_index + 1]] === \"\\n\")\nend\n\n# Example usage\ntext = \"This is a very long sentence that we need to wrap into multiple lines to ensure readability.\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```\n\nIn this example, the `wrap_string` function takes a long text and wraps it according to the specified `text_width`.","status":200,"tokens":[0,269],"elapsed":4.304048651,"_type":"aimessage"}]