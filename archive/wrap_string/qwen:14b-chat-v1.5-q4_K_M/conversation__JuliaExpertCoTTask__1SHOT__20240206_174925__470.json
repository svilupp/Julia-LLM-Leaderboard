[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10)\n    lines = \"\"\n    current_line = \"\"\n    \n    for word in split(text, \" \")\n        if width_of_text(current_line, word) > text_width\n            lines += current_line + \"\\n\"\n            current_line = word\n        else\n            current_line *= \" $word\"\n        end\n    end\n    \n    # Add the last line\n    lines += current_line\n\n    return lines\nend\n\n# Example usage:\ntext = \"This function will wrap words into lines\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```\nIn this code, we define a `wrap_string` function that takes a text and an optional width parameter. It iterates through the words, checking if the combined width exceeds the given width. If it does, it adds a new line and starts a new line with the next word. The process continues until all words have been added to the lines. Finally, the function returns the wrapped text.","status":200,"tokens":[170,220],"elapsed":7.645666976,"_type":"aimessage"}]