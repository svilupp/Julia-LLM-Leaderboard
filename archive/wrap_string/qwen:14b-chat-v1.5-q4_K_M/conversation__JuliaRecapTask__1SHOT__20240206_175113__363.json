[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the `wrap_string` function that adheres to the provided guidelines:\n```julia\nfunction wrap_string(text, text_width::Int = 10))\n    # Split text into words\n    words = split(text)\n\n    # Wrap the text and join the lines\n    wrapped_text = [join(words[i:j]), \" \") for i in 1:length(words), j = (i-1)+1:((i-1)+text_width)>length(words) ? length(words) : ((i-1)+text_width)) ]\n    \n    return \"\\n\".join(wrapped_text)\nend\n```\n\nExample usage:\n```julia\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam non odio et tortor blandit facilisis.\"\n\nwrapped_text = wrap_string(text, text_width = 20)\n\nprintln(wrapped_text)\n```\nThis will output the wrapped text with new lines at the specified `text_width`.","status":200,"tokens":[325,199],"elapsed":3.287937713,"_type":"aimessage"}]