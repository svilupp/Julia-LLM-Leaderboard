[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10))\n    if length(text) > text_width)\n        println()\n        return wrap_string(text[text_width]:end)), text_width)\n    else\n        for i in 1:text_width)\n            println(\" \" * (text_width - i + 1)) # add new line every time a maximum `text_width::Int=10` would be exceeded\n            break # break out of inner loop after adding new line every time a maximum `text_width::Int=10` would be exceeded\n        end # end outer loop after adding new line every time a maximum `text_width::Int=10` would be exceeded\n        println()\n    end\nend\n```\n\nExample:\n\n```julia\nprintln(wrap_string(\"Hello, world!\", 5)) # output: Hello,world!","status":200,"tokens":[0,182],"elapsed":1.733070404,"_type":"aimessage"}]