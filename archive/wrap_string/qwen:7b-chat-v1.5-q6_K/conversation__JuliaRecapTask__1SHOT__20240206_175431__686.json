[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(input_string::AbstractString, text_width::Int = 10)\n    words = split(input_string, r'\\s+'))\n    \n    wrapped_lines = []\n    current_line = \"\"\n    \n    for word in words\n        if length(current_line) + length(word) > text_width\n            push!(wrapped_lines, current_line))\n            current_line = \"\"\n        else\n            current_line *= \" \" * word\n        end\n    end\n    \n    if !isempty(current_line)\n        push!(wrapped_lines, current_line))\n    end\n    \n    return join(wrapped_lines, \"\\n\"))\nend\n\n# Example usage\ninput_string = \"This is a very long string that needs to be wrapped when its length exceeds the given text_width.\"\nwrapped_output = wrap_string(input_string, 15))\nprintln(wrapped_output)\n```\n\nIn this code, I've defined a function `wrap_string` that accepts an input string and a maximum text width. The function iterates over words in the input string, wraps the line if it exceeds the given text_width, and appends a new line between wrapped lines.\n\nThe example usage demonstrates how to call the function with an appropriate input string and text_width value.","status":200,"tokens":[0,256],"elapsed":3.085670692,"_type":"aimessage"}]