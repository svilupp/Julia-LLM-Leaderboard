[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(input_string, text_width = 10)\n    words = split(input_string, keepempty=false))\n    \n    wrapped_lines = []\n    for word in words\n        line_length = length(word) + (word != endswith(words, \" \")) ? 2 : 0\n        if line_length > text_width\n            push!(wrapped_lines, join(wrapped_lines[end-1:end], \"\\n\")))\n            wrapped_lines = [word]\n        else\n            push!(wrapped_lines, word))\n        end\n    end\n\n    return join(wrapped_lines, \"\"))\nend\n\n# Example usage\ninput_string = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus.\"\nwrapped_string = wrap_string(input_string)\nprintln(wrapped_string)\n```\nThis function `wrap_string` takes an input string and a maximum text width as parameters. It splits the input string into individual words, and then iterates over these words to wrap them to the specified text width.\n\nThe output is a single string with each line wrapped to the provided text_width. If a line would exceed the limit, it will start a new line instead.","status":200,"tokens":[0,245],"elapsed":2.953916315,"_type":"aimessage"}]