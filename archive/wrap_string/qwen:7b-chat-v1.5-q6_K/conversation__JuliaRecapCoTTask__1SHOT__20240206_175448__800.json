[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10)\n    words = split(text)\n    wrapped_text = \"\"\n\n    for i in 1:length(words)\n        # Calculate the current line length\n        cur_line_length = wrapped_text[end:end+text_width-1]] != \"\" ? length(wrapped_text[end:end+text_width-1]]) : 0\n\n        if cur_line_length + length(words[i])) > text_width\n            # Add a new line if necessary\n            wrapped_text *= \"\\n\"\n            # Reset the current line length to 0\n            cur_line_length = 0\n        end\n\n        # Append the current word or line break to the wrapped text\n        wrapped_text *= words[i] == \"\" ? \"\\n\" : \" \"\n\n    end\n\n    return wrapped_text\nend\n\n# Example usage\ntext = \"This is a sample text. It has multiple sentences and words that might exceed the given text_width.\"\nwrapped_text = wrap_string(text, 12)\nprintln(wrapped_text)\n```\n\nThe function `wrap_string` takes a text string and an optional `text_width` parameter (default: 10). It iterates over each word in the text, checking if adding it to the current line would exceed the specified `text_width`. If necessary, a new line is added and the line length is reset. Finally, the wrapped text is returned.\n\nIn the example usage, I've provided a sample text with multiple sentences and words that might exceed the default `text_width` of 10. The wrapped text is then printed, showing how the function handles wrapping.","status":200,"tokens":[0,337],"elapsed":4.085923483,"_type":"aimessage"}]