[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10)\n    lines = String[]\n    word_count = 0\n\n    for word in split(text, \" \")\n        word_count += 1\n\n        # Check if the current line would exceed the width\n        if length(lines) > 0 && word_count >= text_width\n            lines[end] *= 2  # Double newline to separate lines\n            push!(lines, \"\")\n            word_count = 1  # Reset word count for the new line\n        end\n\n        if word_count > 0  # Add last line if there's content left\n            lines[end] *= 2  # Double newline to separate lines\n        end\n\n        return join(lines, \"\\n\"))\n    end\nend\n\n# Example usage\ntext = \"This is a sample text that needs to be wrapped. Each word will be considered a new line after exceeding the maximum text width of 10 characters.\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```\n\nThe `wrap_string` function iterates over each word in the input text and adds a new line after a specified maximum text width is exceeded. The example usage demonstrates how to use this function with a sample text.","status":200,"tokens":[0,260],"elapsed":3.136928172,"_type":"aimessage"}]