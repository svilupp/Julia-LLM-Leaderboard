[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width=10)\n    lines = []\n    words = split(text)\n\n    for word in words\n        if length(string(word)) + length(lines[end]) > text_width\n            push!(lines, \"\\n\")\n        end\n        if lines[end] != \"\\n\"\n            push!(lines, word)\n        else\n            push!(lines, word)\n        end\n    end\n\n    return join(lines, \"\")\nend\n\n# Example\ntext = \"This function will wrap words into lines\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```\n\nThe `wrap_string` function takes a string and an optional `text_width` as arguments. It iterates over each word in the text, checking if adding it to the current line would exceed the `text_width`. If necessary, it adds a new line. The function returns the wrapped text as a single string.","status":200,"tokens":[0,193],"elapsed":2.300647076,"_type":"aimessage"}]