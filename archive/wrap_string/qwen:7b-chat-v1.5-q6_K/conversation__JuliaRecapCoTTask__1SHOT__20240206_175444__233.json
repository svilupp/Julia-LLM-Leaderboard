[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width::Int = 10)\n    wrapped_text = \"\"\n    words = split(text)\n\n    for word in words\n        if length(wrapped_text) + length(word) > text_width\n            wrapped_text *= \"\\n\"\n            wrapped_text += word\n        else\n            wrapped_text *= \" \"\n            wrapped_text += word\n        end\n    end\n\n    # Example usage\n    example = \"\"\"\n    This is a multi-line example that demonstrates the `wrap_string` function.\n\n    It will wrap words to fit within a maximum text width of 10 characters.\n    \"\"\"\n    \n    wrapped_example = wrap_string(example)\n    println(wrapped_example)\n\nend\n```\n\nIn this code, I've implemented a function `wrap_string(text, text_width::Int = 10)`. This function takes two arguments: the text to be wrapped, and an optional maximum text width (default is 10 characters).\n\nThe function iterates over each word in the input text. If the sum of the current line's length and the word's length exceeds the `text_width`, a new line is added and the word starts a new line.\n\nFinally, I've provided an example usage with the given text, and you can see how the words are wrapped within the specified `text_width`.","status":200,"tokens":[0,277],"elapsed":3.339665123,"_type":"aimessage"}]