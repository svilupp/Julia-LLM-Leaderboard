[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10)\n    lines = split(text, by = r\"\\s+\")) # Split into words with spaces\n\n    wrapped_lines = []\n    for line in lines\n        # Calculate the width of the current line\n        current_line_width = length(line) * (text_width > length(line) ? text_width : length(line)))\n\n        if current_line_width >= text_width\n            # Add a newline and continue processing\n            wrapped_lines.push(\"\\n\")\n            wrapped_lines.extend(wrap_string(line, text_width), text_width))\n        else\n            # Line width is within the limit, add it to the wrapped lines\n            wrapped_lines.push(line)\n        end\n    end\n\n    return join(wrapped_lines)\nend\n\n# Example usage\ntext = \"This is a sample text. It has multiple sentences and words that may exceed the default text_width of 10 characters.\"\nwrapped_text = wrap_string(text, text_width = 20))\nprintln(wrapped_text)\n```\n\nIn this example, I've implemented a `wrap_string` function which wraps words in a text to fit within a specified `text_width`. The function splits the text into words and then iterates over each line, adding new lines when needed. In the provided example, I set `text_width = 20` for demonstration purposes, but you can adjust it as per your requirement.","status":200,"tokens":[0,295],"elapsed":3.567605898,"_type":"aimessage"}]