[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width::Int = 10)\n    wrapped_text = \"\"\n    words = split(text)\n\n    for word in words\n        if length(wrapped_text) + length(word) > text_width\n            wrapped_text *= \"\\n\"\n            wrapped_text += word\n        else\n            wrapped_text *= \" \"\n            wrapped_text += word\n        end\n    end\n    return wrapped_text\nend\n\n# Example usage\ntext = \"This is a very long sentence that needs to be wrapped for better readability. The maximum text_width is set to 10 characters.\"\nwrapped_text = wrap_string(text, 10)\nprintln(wrapped_text)\n```\nIn this example, the `wrap_string` function takes a string and a maximum text width as input. It iterates over each word in the text, checks if adding the current word would exceed the text width, and wraps the text accordingly. The output demonstrates how the text is wrapped for readability within the specified text width.","status":200,"tokens":[0,211],"elapsed":2.538058403,"_type":"aimessage"}]