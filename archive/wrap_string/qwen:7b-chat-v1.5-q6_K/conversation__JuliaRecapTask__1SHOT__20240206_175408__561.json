[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10)\n    words = split(text, word边界 = r'\\b'))\n    \n    wrapped_text = \"\"\n    for i in 1:length(words)\n        if length(wrapped_text) + length(words[i]) > text_width\n            wrapped_text *= \"\\n\"\n        end\n        wrapped_text *= words[i] * \" \"\n    end\n    \n    wrapped_text\nend\n\n# Example\ntext = \"This is a test string with more than ten words. It will wrap to new lines when the maximum text width is reached.\"\nwrapped_text = wrap_string(text, text_width = 10))\nprintln(wrapped_text)\n```\n\nThe `wrap_string` function takes a text and an optional `text_width` parameter as inputs. It splits the text into individual words using `split`, then iterates over the words.\n\nEach time a word would cause the total length to exceed `text_width`, a new line is added to the wrapped text. The final wrapped text is returned by the function.","status":200,"tokens":[0,226],"elapsed":2.731169247,"_type":"aimessage"}]