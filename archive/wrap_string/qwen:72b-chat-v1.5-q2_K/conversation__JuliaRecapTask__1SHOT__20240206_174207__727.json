[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(words, text_width::Int=10)\n    result = \"\"\n    current_line_length = 0\n\n    for word in words\n        if current_line_length + length(word) <= text_width\n            # Add the word to the current line\n            result *= \" $word\"\n            current_line_length += length(word) + 1 # account for space\n        else\n            # Start a new line with the current word\n            result *= \"\\n$word\"\n            current_line_length = length(word)\n        end\n    end\n\n    return result\nend\n\n# Example usage:\nwords = [\"Lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\"]\nwrapped_text = wrap_string(words)\nprintln(wrapped_text)\n```\n\nThe function `wrap_string` takes a vector of words and an optional argument `text_width`, which defaults to 10. It returns a string with the words wrapped according to the given width.\n\nIn the example, we create a vector `words` containing some dummy text. We then call `wrap_string(words)` to get the wrapped text, which is finally printed to the console.","status":200,"tokens":[325,242],"elapsed":11.344045214,"_type":"aimessage"}]