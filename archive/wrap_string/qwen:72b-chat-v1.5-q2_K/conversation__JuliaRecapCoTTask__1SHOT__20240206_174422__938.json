[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"No special instructions were provided.\n\nHere's the implementation of the `wrap_string` function:\n\n```julia\nfunction wrap_string(words, text_width::Int=10)\n    line = \"\"\n    for word in words\n        if length(word) + length(line) > text_width\n            println(line)\n            line = word\n        else\n            if length(line) == 0\n                line = word\n            else\n                line *= \" \" * word\n            end\n        end\n    end\n    println(line)\nend\n\n# Example usage:\nwords = [\"Here\", \"is\", \"an\", \"example\", \"sentence.\"]\nwrap_string(words)\n```\n\nThe function `wrap_string` takes an array of words and a text width as input. It iterates over the words, checking if adding the current word would exceed the maximum text width. If it does, the function prints the current line and starts a new line with the current word.\n\nIn the example usage, we provide an array of words, and the `wrap_string` function formats them into lines with a maximum width of 10 characters.","status":200,"tokens":[0,231],"elapsed":10.425495802,"_type":"aimessage"}]