[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the function `wrap_string` that follows your requirements:\n\n```julia\nfunction wrap_string(text, text_width::Int = 10)\n    words = split(String(text)), ' ')\n    \n    wrapped_lines = []\n    line_length = 0\n\n    for word in words\n        if line_length + length(word) > text_width\n            # Add a new line and reset the counter\n            wrapped_lines.push(String(\"\\n\"))) \n            line_length = 0\n        end\n        \n        # Update line length, considering spaces as well\n        line_length += length(word) + (word != \" \") ? 1 : 0\n    end\n    \n    return join(wrapped_lines), '')  # Join the lines and remove trailing newline\nend\n```\n\nHere's an example usage:\n\n```julia\ntext = \"This is a very long sentence that needs to be wrapped. The maximum text_width is 10 characters.\"\nwrapped_text = wrap_string(text, 10))\nprintln(wrapped_text)\n```\n\nIn this example, the input text has a length exceeding `10` characters per line, so the function wraps it properly.","status":200,"tokens":[0,239],"elapsed":2.503109055,"_type":"aimessage"}]