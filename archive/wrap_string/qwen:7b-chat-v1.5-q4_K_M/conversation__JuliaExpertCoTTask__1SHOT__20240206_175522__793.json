[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width=10)\n    wrapped_text = \"\"\n    \n    for word in split(text)\n        if length(wrapped_text) + length(word) > text_width\n            wrapped_text *= \"\\n\"\n        wrapped_text *= word * \" \"\n    end\n    \n    return wrapped_text\nend\n\nexample = wrap_string(\"This function will wrap words into lines\", 12)\nprintln(example)\n```\nIn this example, the `wrap_string` function takes a string and an optional text_width. It iterates over each word in the input text. If the total length of the current line and the next word would exceed `text_width`, it adds a new line. The function returns the wrapped string. In the provided example, the words are wrapped to fit within 12 characters per line.","status":200,"tokens":[0,173],"elapsed":1.79157907,"_type":"aimessage"}]