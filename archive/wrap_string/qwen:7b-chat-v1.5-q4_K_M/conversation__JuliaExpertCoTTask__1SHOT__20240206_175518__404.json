[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width=10)\n    wrapped_text = \"\"\n    \n    for word in split(text, \" \") |> collect\n        if length(wrapped_text) + length(word) > text_width\n            wrapped_text *= \"\\n\"  # Add a newline\n            word = word[1:text_width-length(wrapped_text))]  # Truncate the word\n        wrapped_text *= word * \" \"  # Append the truncated word with space\n    end\n    \n    wrapped_text\nend\n\nexample_text = \"This function will wrap words into lines\"\nwrapped_example = wrap_string(example_text)\nprintln(wrapped_example)\n```\nThe `wrap_string` function takes a string and a maximum text width as input. It iterates over each word in the text, checking if adding the word would exceed the text_width. If it does, a newline is added and the word is truncated.\n\nIn the example provided, I've used the given text \"This function will wrap words into lines\" and calculated the wrapped version with a maximum text width of 10 characters.","status":200,"tokens":[0,226],"elapsed":2.339140194,"_type":"aimessage"}]