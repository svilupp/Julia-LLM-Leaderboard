[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width::Int = 10)\n    lines = String[]\n    word_index = 1\n\n    for line in eachline(String(text)))\n        current_line = line\n        while true\n            # Check if the next word would exceed the width\n            if endswith(current_line, \" \") && word_index * text_width > length(current_line) + 2\n                push!(lines, current_line)\n                break  # New line reached or no more words to fit\n            # If the next word fits, add it and continue\n            next_word = nextword(String(current_line)))\n            if !isempty(next_word) && word_index * text_width < length(next_word) + 2\n                push!(current_line, \" \"))\n                push!(lines, current_line)\n                word_index += 1\n                break  # Next word fits and a new line is added\n            end  # If next word doesn't fit, check the previous one\n        end  # While loop for adding spaces and checking width\n\n        # Add last line if it didn't wrap\n        if length(current_line) > text_width\n            push!(lines, current_line))\n        end\n    end  # For loop for each line in the text\n\n    return lines\nend\n```\nExample usage:\n```julia\ntext = \"This is a test. It should wrap at 10 characters wide.\"\n\nwrapped_text = wrap_string(text)\nfor line in wrapped_text\n    println(line)\nend\n```\nOutput will be a wrapped version of the input text with newlines added when necessary.","status":200,"tokens":[0,337],"elapsed":3.538169501,"_type":"aimessage"}]