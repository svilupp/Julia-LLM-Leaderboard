[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10)\n    wrapped_text = \"\"\n    \n    for word in split(text, \" \")\n        if length(wrapped_text) + length(word) > text_width\n            wrapped_text *= \"\\n\"  # add a new line\n            word = \" \"  # reset the current word\n        end\n        wrapped_text *= word  # append the rest of the word\n    end\n    \n    wrapped_text\nend\n\n# Example\nwrap_string(\"This function will wrap words into lines\")\n```\nThe `wrap_string` function iterates over each word in a provided text. It checks if adding the current word would exceed the maximum text width. If it does, a new line is added and the current word is reset to a space.\n\nFinally, after iterating through all the words, the wrapped text is returned. In the example provided, the input text is \"This function will wrap words into lines\", and the output will be the same text wrapped onto multiple lines according to the specified `text_width`.","status":200,"tokens":[0,219],"elapsed":2.262770264,"_type":"aimessage"}]