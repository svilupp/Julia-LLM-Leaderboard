[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(input_str, text_width = 10)\n    words = split(input_str, keepends=false))\n    \n    wrapped_str = \"\"\n    for i in 1:length(words)\n        line = words[i]\n        \n        if (length(line) + length(wrapped_str)) > text_width\n            wrapped_str *= \"\\n\"\n            \n            line = \"...\" * (text_width - length(line))) + line\n        end\n        \n        wrapped_str *= line * (\" \" if i < length(words) else \"\\n\") \n    end\n    \n    return wrapped_str\nend\n\n# Example usage\ninput_str = \"This is a very long sentence that needs to be wrapped with new lines when its length exceeds the maximum text width of 10 characters.\"\nwrapped_str = wrap_string(input_str, text_width=10))\nprintln(wrapped_str)\n```\n\nThe above function `wrap_string` takes an input string and a maximum text width as parameters. It iterates over the words in the input, checks if the combined length (including current line) exceeds the text width. If so, it adds a new line and wraps the remaining part of the word.\n\nExample usage is provided at the end, which demonstrates how to call the function with an example input string.","status":200,"tokens":[0,268],"elapsed":2.81318776,"_type":"aimessage"}]