[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Sure! Here's the `wrap_string` function in Julia that follows your requirements:\n```julia\nfunction wrap_string(text, text_width = 10)\n    lines = []\n    words = split(text)\n\n    for word in words\n        # Check if the word fits within the current line or exceeds width\n        line_length = length(line) + length(string(word))) \n        if line_length <= text_width\n            push!(line, word)\n        else\n            # If the word exceeds the line width, add the line to the lines array and start a new line\n            lines.push(join(line))\n            line = [\" \"]\n            push!(line, word)\n        end\n    end\n\n    # Add the last line (if any) to the lines array\n    if !isempty(line)\n        lines.push(join(line))\n    end\n\n    return join(lines)\nend\n```\nExample usage:\n```julia\ntext = \"This is a sample text. It contains multiple words that might exceed the maximum text width of 10 characters.\"\n\nwrapped_text = wrap_string(text, 10)\nprintln(wrapped_text)\n```\nIn this example, the given text will be wrapped to fit within a maximum width of 10 characters.","status":200,"tokens":[0,258],"elapsed":2.697974545,"_type":"aimessage"}]