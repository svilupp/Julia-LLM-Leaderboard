[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing UnicodeStrings\n\nfunction wrap_string(text, text_width = 10)\n    lines = []\n    words = split(UnicodeString(text), ' '))\n\n    for word in words\n        push!(lines, word))\n        \n        # Check if line would exceed width\n        if length(lines[end]) + length(word) > text_width\n            lines.pop()  # Remove last added line\n            lines[end] *= ' ' # Add space to previous line\n            push!(lines, '\\n'))  # Start a new line\n        end\n    end\n\n    return join(lines)\nend\n\n# Example usage\ntext = \"This is a test string. It has multiple words and should be wrapped according to the text_width parameter.\"\nwrapped_text = wrap_string(text, 15)  # Adjust text_width as needed\nprintln(wrapped_text)\n```\n\nThe `wrap_string` function takes a text and a maximum width for wrapping lines. It iterates over each word in the text and checks if adding it to the current line would exceed the width. If so, it starts a new line and adds spaces to the previous line as needed.\n\nIn the example usage, I provided a sample text and demonstrated how the `wrap_string` function would wrap it according to the specified text_width (15 in this case).","status":200,"tokens":[0,277],"elapsed":2.902850724,"_type":"aimessage"}]