[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    words = split(text)\n    wrapped_lines = Vector{String}[]\n    \n    for word in words\n        if length(word) > text_width\n            push!(wrapped_lines, [word]))\n        else\n            current_line = join(last(wrapped_lines), \"\"), \" \")\n            new_line = current_line * word\n            if length(new_line) <= text_width\n                last(wrapped_lines)[end] *= \" \" * word\n            else\n                push!(wrapped_lines, [word]))\n            end\n        end\n    end\n    \n    return join(vcat([[first(wrapped_lines)]];\n    collect(Iterators.partition(last(wrapped_lines), 1)), wrapped_lines[2:end]))), \"\\n\")\nend\n\n# Example usage:\ntext = \"This is a sample text to demonstrate the wrap_string function.\"\nwrapped_text = wrap_string(text, 15)\nprintln(wrapped_text)\n```\n\nThe example above demonstrates the `wrap_string` function. It takes an input `AbstractString`, splits it into words, and wraps them based on the given `text_width`. If no width is provided, a default of 10 characters is used.\n\nIn the example, we create a sample text, call the `wrap_string` function with a custom width of 15 characters, and then print the wrapped text.","status":200,"tokens":[0,294],"elapsed":17.1696214,"_type":"aimessage"}]