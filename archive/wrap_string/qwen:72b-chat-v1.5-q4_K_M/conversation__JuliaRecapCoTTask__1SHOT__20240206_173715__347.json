[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(s::AbstractString, text_width::Int = 10)\n    words = split(s)\n    wrapped_words = Vector{String}[]\n    \n    current_line = String[]\n    total_length = 0\n    \n    for word in words\n        if total_length + length(word) > text_width\n            push!(wrapped_words, copy(current_line))\n            current_line = String[word]\n            total_length = length(word)\n        else\n            push!(current_line, word)\n            total_length += length(word)\n        end\n    end\n    \n    push!(wrapped_words, current_line)\n    \n    return join(wrapped_words, \"\\n\")\nend\n\n# Example\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nwrapped_text = wrap_string(text, 15)\nprintln(wrapped_text)\n```\n\nThis function `wrap_string` takes a string `s`, and an optional parameter `text_width::Int=10`. It splits the input string into words, then iteratively adds each word to the current line. If adding a word would exceed the `text_width`, it starts a new line. The result is a wrapped version of the original text, with lines no longer than `text_width` characters.\n\nIn the example provided, the function is applied to a Latin placeholder text, wrapping it into lines with a maximum length of 15 characters. The resulting wrapped text is printed out.","status":200,"tokens":[0,295],"elapsed":17.22611803,"_type":"aimessage"}]