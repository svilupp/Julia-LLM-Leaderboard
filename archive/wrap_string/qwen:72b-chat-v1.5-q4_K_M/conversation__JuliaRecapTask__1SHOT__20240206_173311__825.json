[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(string, text_width::Int = 10)\n    words = split(string)\n    \n    wrapped_lines = []\n    current_line = \"\"\n    \n    for word in words\n        if length(current_line) + length(word) <= text_width\n            # If the new word fits on the line, add it\n            current_line *= \" $word\"\n        else\n            # If the new word doesn't fit, push the current line to the list of wrapped lines and start a new line\n            push!(wrapped_lines, current_line)\n            current_line = \" $word\"\n        end\n    end\n    \n    if !isempty(current_line)  # Push the last line if it's not empty\n        push!(wrapped_lines, current_line)\n    end\n    \n    return join(wrapped_lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"This is a long sentence that will be wrapped at a maximum width of 10 characters.\"\nwrapped_text = wrap_string(text, 10)\nprintln(wrapped_text)\n```\n\nThis function `wrap_string` takes a string and wraps the words at a specified `text_width`. The example demonstrates how to use the function with an input text and a default `text_width` of 10.","status":200,"tokens":[325,264],"elapsed":15.831782836,"_type":"aimessage"}]