[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(string, text_width::Int = 10)\n    words = split(string)\n    lines = []\n    \n    for word in words\n        if length(word) > text_width\n            push!(lines, stringjoin(lines[end][1:text_width]], \"\\n\"))\n            lines[end] = \"\"\n        end\n        \n        if isempty(lines[end])\n            push!(lines, word)\n        else\n            lines[end] *= \" \" * word\n        end\n    end\n    \n    return join(lines, \"\\n\")\nend\n\n# Example:\nexample_string = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nwrapped_string = wrap_string(example_string)\n\nprintln(\"Original String:\")\nprintln(example_string)\nprintln(\"\\nWrapped String (text_width=10):\")\nprintln(wrapped_string)\n```\n\nThis example demonstrates the `wrap_string` function. It takes a string and an optional text width parameter (default is 10). The function then wraps the string at the specified width, breaking words if necessary.\n\nThe provided example showcases the original string and its wrapped counterpart with a text width of 10 characters.","status":200,"tokens":[8,233],"elapsed":13.626937534,"_type":"aimessage"}]