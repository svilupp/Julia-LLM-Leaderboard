[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(s::AbstractString, text_width::Int = 10)\n    words = split(s)\n    lines = Vector{String}()\n    \n    line_length = 0\n    for word in words\n        new_line_length = line_length + length(word) + 1 # Add 1 for space\n        if new_line_length > text_width\n            push!(lines, string(line[1:end-1]])) # Remove last space\n            line = word\n            line_length = length(line)\n        else\n            line *= \" $word\" # Add space before word\n            line_length = new_line_length\n        end\n    end\n    \n    if !isempty(line) # If the last line is not empty\n        push!(lines, line)\n    end\n\n    return join(lines, \"\\n\")\nend\n\n\n# Example:\ns = \"This is a long sentence that will be wrapped at a maximum width of 10 characters.\"\nresult = wrap_string(s, text_width=10)\nprintln(result)\n```\n\nWhen you run this example, it prints the input string `s` wrapped to a maximum width of 10 characters.","status":200,"tokens":[0,244],"elapsed":14.217258898,"_type":"aimessage"}]