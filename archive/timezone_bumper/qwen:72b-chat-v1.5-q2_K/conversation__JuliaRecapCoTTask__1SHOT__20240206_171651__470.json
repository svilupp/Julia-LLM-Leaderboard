[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction timezone_bumper(dt, bump = 3)\n    if isa(dt, Dates.DateTime)\n        return dt + Dates.Hour(bump)\n    elseif isa(dt, Dates.Date)\n        throw(DomainError(\"Cannot bump a Date type. Please convert to DateTime first.\")))\n    else\n        throw(DomainError(\"Unsupported data type for timezone_bumper. Requires either Dates.DateTime or Dates.Date.\")))\n    end\nend\n```\n\nThis function `timezone_bumper` takes a `Dates.DateTime` object `dt` and an optional integer argument `bump`, which defaults to 3 if not provided. It adds the specified number of hours to the input timestamp.\n\nIf the function is passed a `Dates.Date` object, it throws a `DomainError` with an appropriate message.\n\nFor any other non-supported data type, the function also raises a `DomainError`. This ensures the function operates only on the designated types, as per the Special Instructions.","status":200,"tokens":[0,200],"elapsed":9.028235321,"_type":"aimessage"}]