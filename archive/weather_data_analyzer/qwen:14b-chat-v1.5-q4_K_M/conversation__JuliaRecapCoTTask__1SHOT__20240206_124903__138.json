[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the provided guidelines and special instructions, here's a solution for the `weather_data_analyzer` function:\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    # Check if list is empty\n    if isempty(temps)\n        return (;\n            average=nothing,\n            max=nothing,\n            min=nothing,\n            trend=nothing,\n        ))\n    end\n\n    # Perform statistical analysis and calculate trends\n    average_temp = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n\n    if isincreasing(temps) || isdecreasing(temps)\n        trend = temps[end] > temps[1] ? :increasing : :decreasing\n    else\n        trend = :stable\n    end\n\n    # Return results in named tuple\n    return (;\n        average=average_temp,\n        max=max_temp,\n        min=min_temp,\n        trend=trend,\n    ))\nend\n```\n\nThis function first checks if the `temps` list is empty. If it is, it returns a named tuple with all values set to `nothing`. Otherwise, it performs statistical analysis and calculates the trend based on the provided criteria. Finally, it returns the results in a named tuple.","status":200,"tokens":[0,260],"elapsed":4.173637057,"_type":"aimessage"}]