[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        result = (; average=nothing, max=nothing,\n                                  min=nothing, trend=nothing))\n    else\n        avg_temp = mean(temps)\n        max_temp = maximum(temps)\n        min_temp = minimum(temps)\n        \n        trend = ifelse(all(c -> isnan(c), temps)), \"stabilizing\",\n                                      (max(temps) .- min(temps)).>0 ? \":increasing\" :\n                                      (min(temps) .- max(temps)).<0 ? \":decreasing\" : \"stable\"))\n        \n        result = (; average=avg_temp, max=max_temp,\n                                  min=min_temp, trend=trend))\n    end\n    \n    return result\nend\n\n# Example usage\ntemperatures = [25.3, 26.7, 28.1, 29.4]\nresult = weather_data_analyzer(temperatures)\nprintln(result)\n```\nThis function `weather_data_analyzer` performs the requested statistical analysis on a given list of temperature data. It returns a named tuple containing the average, maximum, minimum temperatures and the trend in the data. If the input list is empty, it returns a named tuple with all values set to `nothing`.","status":200,"tokens":[0,282],"elapsed":3.422228882,"_type":"aimessage"}]