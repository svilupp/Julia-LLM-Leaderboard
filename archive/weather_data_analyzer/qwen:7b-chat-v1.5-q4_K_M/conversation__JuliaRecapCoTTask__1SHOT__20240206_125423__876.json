[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (; average = nothing, max = nothing, min = nothing, trend = nothing))\n    end\n\n    daily_stats = Stats.statistic(temps, :mean)  # Average temperature\n    max_temp = maximum(temps)  # Maximum temperature\n    min_temp = minimum(temps)  # Minimum temperature\n\n    trend_analysis = if allIncreases(temps), decreasing === nothing)\n        :increasing\n    elseif allDecreases(temps), increasing === nothing)\n        :decreasing\n    else\n        :stable\n    end\n\n    weather_analysis = (;\n        average = daily_stats,\n        max = max_temp,\n        min = min_temp,\n        trend = trend_analysis\n    ))\n\n    return weather_analysis\nend\n\n# Example usage\ntemps = [25, 28, 30, 27, 25]  # Daily temperature data\nweather_data_analyzer(temps)\n```\nThis function performs the requested statistical analysis on a given list of daily temperatures. It returns the results in a named tuple with keys `average`, `max`, `min`, and `trend`. If the input list is empty, it returns a named tuple with all values set to `nothing`.","status":200,"tokens":[0,275],"elapsed":2.88870953,"_type":"aimessage"}]