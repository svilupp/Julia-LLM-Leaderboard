[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing))\n    end\n\n    stats = Statistics.mean(temps), Statistics.max(temps), Statistics.min(temps)\n    trend = if all(t -> t > prev_t, temps[2:end]) && temps[1] < temps[end])\n                   \":increasing\"\n                 elseif all(t -> t < prev_t, temps[2:end]) && temps[1] > temps[end])\n                   \":decreasing\"\n                 else\n                   \":stable\"\n                 end\n    result = (; average=stats[1], max=stats[2], min=stats[3], trend=trend))\n    \n    return result\nend\n\n# Example usage:\ntemperatures = [25, 28, 30, 29, 26])\nresult = weather_data_analyzer(temperatures)\nprintln(result)\n```\n\nThis function takes a list of daily temperatures as input and returns a named tuple containing the average, maximum, minimum temperatures, and a trend analysis. The trend is determined based on the provided temperature data. If the list is empty, the function returns a named tuple with all values set to `nothing`.","status":200,"tokens":[0,271],"elapsed":2.851207659,"_type":"aimessage"}]