[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder for the Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Solution Steps\n\n1. Recall Julia syntax for constructing a Julia function and named tuples.\n2. Employ the necessary packages and functions for statistical analysis. \n3. Utilize control structure (`if-else`) for determining the trend.\n4. Create a named tuple to store the outputs.\n5. Double-check the code with simple test data.\n\n# Code\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if length(temps) > 0\n        avg = mean(temps)\n        maxval = maximum(temps)\n        minval = minimum(temps)\n        trend = :stable\n        if all(i < trend[i+1] for i in 1:length(trend)-1)\n            trend = :increasing\n        elseif all(i > trend[i+","status":200,"tokens":[471,200],"elapsed":3.422151958,"cost":0.0006039,"log_prob":null,"finish_reason":"length","run_id":-1488844593,"sample_id":null,"_type":"aimessage"}]