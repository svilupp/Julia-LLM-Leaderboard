[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    lines = [\"\" for _ in 1:length(words)]\n    current_line_length = 0\n    \n    for i in 1:length(words)\n        word_length = length(words[i])\n        if current_line_length + word_length + 1 > text_width\n            lines[length(lines)] += words[i]\n            current_line_length = 0\n        elseif current_line_length > 0\n            lines[length(lines)] += \" \"\n            current_line_length += 1\n        end\n        lines[length(lines)-1] += words[i]\n        current_line_length += word_length + 1\n    end\n    \n    return join(lines, \"\\n\")\nend\n\nexample_text = \"Julia is a high-level, high-performance dynamic programming language.\"\nwrapped_text = wrap_string(example_text, 10)\nprintln(wrapped_text)\n```\n\nThis function `wrap_string` takes a string and an optional parameter `text_width` to specify the maximum width for each line. It splits the text into words and iterates over them, adding each word to the current line if it would cause the line to exceed the maximum width. If that would happen, it starts a new line. The function then joins all the lines back together with a newline character between each line.","status":200,"tokens":[374,354],"elapsed":9.13807818,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":963882292,"sample_id":null,"_type":"aimessage"}]