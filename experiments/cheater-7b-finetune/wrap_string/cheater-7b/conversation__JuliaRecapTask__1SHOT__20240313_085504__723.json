[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    current_line_length = 0\n    wrapped_text = \"\"\n    \n    for word in words\n        word_length = length(word)\n        if current_line_length + word_length + 1 > text_width  # `1` for the space\n            wrapped_text *= wrapped_text != \"\" ? \"\\n\" : \"\"\n            current_line_length = 0\n        end\n        \n        wrapped_text *= current_line_length > 0 ? \" \" : \"\"\n        wrapped_text *= word\n        current_line_length += word_length + (current_line_length > 0 ? 1 : 0)  # Add 1 for the space if not the first word\n    end\n    \n    return wrapped_text\nend\n\n# Example\ntext = \"Julia is a high-level, high-performance dynamic programming language for technical computing.\"\nprintln(wrap_string(text))\n```\n\nThis function `wrap_string` takes in a string `text` and an optional integer `text_width` which defaults to 10. It splits the text into words and iterates over them, adding new lines as necessary to avoid exceeding the `text_width`. The example demonstrates how the function works with a sample text.","status":200,"tokens":[374,321],"elapsed":8.296170792,"cost":0.0,"log_prob":null,"finish_reason":"stop","run_id":-1745840003,"sample_id":null,"_type":"aimessage"}]