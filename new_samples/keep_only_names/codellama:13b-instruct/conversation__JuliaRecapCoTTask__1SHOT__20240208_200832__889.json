[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `keep_only_names` which iterates over the provided list of words (`words`) and removes all words that do not start with a capital letter (eg, remove \"dog\" but keep \"Dog\").\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Solution\n\nFunction `keep_only_names` takes a list of words (`words`) as input and returns a list with all the words that start with a capital letter.\n\n```julia\nfunction keep_only_names(words::Vector{String})\n    return filter(word -> startswith(uppercase(word), word), words)\nend;\n```\nThe function uses `filter` to iterate over the list of words, checks if the current word starts with a capital letter using `startswith(uppercase(word), word)`, and returns only those words that meet this condition.\n\nNote: The input is assumed to be a vector of strings (`Vector{String}`). If the input is a string, you can convert it into a vector of characters first using `split(string, \"\")`.","status":200,"tokens":[380,174],"elapsed":4.616417214,"_type":"aimessage"}]