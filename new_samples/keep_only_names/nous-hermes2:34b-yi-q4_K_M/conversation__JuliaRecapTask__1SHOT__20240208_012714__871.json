[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `keep_only_names` which iterates over the provided list of words (`words`) and removes all words that do not start with a capital letter (eg, remove \"dog\" but keep \"Dog\").\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"We'll solve this problem in two steps:\n1. Check if the word starts with a capital letter or not.\n2. If it doesn't start with a capital letter, remove that from the list.\n\nLet's begin!\n\n```julia\nfunction keep_only_names(words::AbstractVector)::AbstractVector\n    filtered = [word for word in words if isuppercasefirst(word)]\n    return filtered\nend\n\n# helper function to check if first letter of a string is upper case\nisuppercasefirst(str::AbstractString)::Bool = startswith(str, uppercase('a':'z'))\n```\n\nWe define our function `keep_only_names` that takes in an abstract vector (`words`) and returns another abstract vector. It then uses a list comprehension to keep only those words where the first character is a capital letter (as determined by `isuppercasefirst(word)`). Finally, it returns this filtered list.\n\nTo test our function, we'll create a sample list of words:\n\n```julia\nsample_words = [\"dog\", \"Cat\", \"tiger\"]\nprintln(keep_only_names(sample_words))\n```\n\nThis should return `[\"Cat\"]` because \"Cat\" is the only word that starts with a capital letter.","status":200,"tokens":[0,296],"elapsed":8.762617879,"_type":"aimessage"}]