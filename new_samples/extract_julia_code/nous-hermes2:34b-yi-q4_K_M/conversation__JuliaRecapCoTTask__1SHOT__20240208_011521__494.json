[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"function extract_julia_code(md::AbstractString; language=\"julia\", codeblocks=Regex(\"```$language\\n(?:(\\w+)\\n*)?((?:(.|[\\r\\n])*)(?:\\1))?(?:```)?\"))\n    # Initialize an empty string to store the extracted code blocks\n    code = \"\"\n\n    # Split markdown by newline\n    lines = split(md, '\\n')\n\n    # Iterate over each line\n    for (i, line) in enumerate(lines)\n        # Check if current line is a code fence for julia language\n        if match(codeblocks, line) !== nothing && lines[i-1] != \"```\"\n            # Extract the content inside the code block and remove any trailing newline characters\n            content = join(lines[(i+2):end]) * '\\n' # Join all subsequent lines until next code fence or end of markdown\n            content = replace(content, r\"\\r?\\n{2,}\" => \"\\n\") # Replace multiple newlines with a single one\n\n            # Append the extracted content to the main string\n            code *= content\n\n            # Reset the lines array and index for next iteration\n            lines = []\n            i = 1\n        else\n            push!(lines, line)\n        end\n    end\n\n    return code\nend","status":200,"tokens":[0,324],"elapsed":9.624524728,"_type":"aimessage"}]