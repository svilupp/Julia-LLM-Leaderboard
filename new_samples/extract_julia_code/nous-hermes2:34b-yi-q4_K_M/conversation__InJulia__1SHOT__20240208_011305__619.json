[{"content":"Act as a helpful AI assistant","variables":[],"_type":"systemmessage"},{"content":"In Julia, You are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.","variables":[],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)\n    output = \"\"\n    fenced = false # track if we're inside a fenced code block\n    quote_style = 0  # quote style (in markdown, quotes are used to delimit code blocks)\n\n    for char in md\n        if isequal(char, '#') && (!isspace(prevind(md, previndex(md))) || !isalpha(prevind(md, previndex(md)))) # code fence starting with '#'\n            fenced = true\n        elseif isequal(char, '\\n')\n            if fenced && quote_style == 0  # if we were inside a fenced code block and there are no quotes\n                quote_style = char === '>' ? 1 : -1 # check if it's an open or closed quote\n            elseif quote_style == 0\n                quote_style = char === '>' ? 1 : -1  # update quote style if we hit a new line without a code fence\n            end\n        elseif isspace(char) && fenced && quote_style == 0 # check if it's whitespace after the opening code fence and there are no quotes\n            output *= '\\n' # add a newline to the output\n        elseif !isspace(prevind(md, previndex(md))) && (!fenced || quote_style == -1)  # if it's not whitespace or we aren't in a fenced code block with an open quote\n            output *= char # append the character to the output\n        end\n    end\n\n    return output\nend\n```","status":200,"tokens":[0,381],"elapsed":11.151057034,"_type":"aimessage"}]