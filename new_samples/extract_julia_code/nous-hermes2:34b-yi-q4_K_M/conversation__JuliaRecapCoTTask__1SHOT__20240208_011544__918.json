[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)\n    lines = split(strip(md))\n    start, end_ = 0, 1\n    out = String[]\n    in_fence = false\n    while start < length(lines)\n        if lines[start] == \"```julia\"\n            in_fence = true\n        elseif in_fence && lines[end_] == \"```\"\n            in_fence = false\n            end_ += 1\n        elseif in_fence\n            push!(out, lines[start:(end_-1)])\n            start = end_ + 1\n        end\n    end\n    return join(out, '\\n')\nend\n```\n\nThe `extract_julia_code` function takes a string `md` as input and splits it into individual lines. It then iterates through the lines using two pointers, `start` and `end_`, to identify Julia code blocks between triple backticks (`````). If a line matches the pattern \"```julia\", the code block is entered, and if a line matches the pattern \"```\", the code block is exited. The function collects each code block into an array of strings called `out` and joins them together with newlines using the `join` function before returning the final result as a string.","status":200,"tokens":[0,303],"elapsed":8.99710574,"_type":"aimessage"}]