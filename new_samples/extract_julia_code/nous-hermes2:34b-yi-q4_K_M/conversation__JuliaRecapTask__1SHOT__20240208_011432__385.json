[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)::String\n    lines = split(md, '\\n')\n    start_index = findfirst('```', lines[1])\n    end_index = findfirst('```', lines[end])\n    fenced_content = \"\"\n    current_fence = \"\"\n    for (i, line) in enumerate(lines)\n        if start_index > 0 && current_fence == \"\"\n            start_index += length(line[start_index:end])\n            fenced_content = line[start_index+1:end]\n        elseif end_index > 0 && current_fence == \"julia\"\n            current_fence = \"\"\n            end_index += length(line[end_index:end])\n            fenced_content *= '\\n'*line[start_index+1:end]\n        elseif line[1:3] == \"```\"\n            if current_fence != \"\"\n                current_fence = \"\"\n            elseif line[4:7] == \"julia\"\n                current_fence = \"julia\"\n            end\n        end\n    end\n    return fenced_content\nend\n```","status":200,"tokens":[0,292],"elapsed":8.682519571,"_type":"aimessage"}]