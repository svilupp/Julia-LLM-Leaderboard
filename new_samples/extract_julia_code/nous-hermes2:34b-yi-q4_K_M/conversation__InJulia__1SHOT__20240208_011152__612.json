[{"content":"Act as a helpful AI assistant","variables":[],"_type":"systemmessage"},{"content":"In Julia, You are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.","variables":[],"_type":"usermessage"},{"content":"function extract_julia_code(md::String)\n    # Remove markdown from document\n    doc = \"```julia\\n\" * md * \"\\n```\"\n    # Split document into lines\n    lines = split(doc, '\\n')\n\n    # Initialize empty string to store code blocks\n    julia_code = \"\"\n\n    in_fence = false\n    in_code = false\n    current_line = 1\n    num_spaces = 0\n    indentation = 0\n    is_comment = true\n    in_string = false\n\n    for line in lines\n        if ismatch(r\"^```julia$\", line) || ismatch(r\"^\\[julia\\]\", line)\n            in_fence = !in_fence\n        elseif ismatch(r\"^```$\") || ismatch(r\"^\\[]$\")\n            break\n        end\n\n        if in_code && (is_comment || !in_string)\n            julia_code *= \"\\n\" * line\n        end\n\n        if match(r\"^#.*$\", line) == nothing\n            indentation = min(4, max(-1, length(match(r\"^\\s+\", line)) - num_spaces))\n            num_spaces = indentation + (is_comment ? 0 : 2)\n        else\n            indentation += length(match(r\"^\\s*#.*\\n\\s*\", line)[1])\n            num_spaces = indentation + (is_comment ? 0 : 2)\n            is_comment = true\n        end\n\n        if is_comment && match(r\"^```julia$\", line) == nothing\n            in_string = match(r\"^([\\\"]|[`]).*$\", line)[1] == \"\\\"\" || match(r\"^([\\\"]|[`]).*$\", line)[1] == \"`\"\n        end\n    end\n\n    return julia_code\nend","status":200,"tokens":[0,479],"elapsed":14.013286954,"_type":"aimessage"}]