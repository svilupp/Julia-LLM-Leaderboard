[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is your function:\n\n```julia\nfunction extract_julia_code(md::AbstractString)\n    julia_blocks = filter(!isempty, split(md, \"```\"))\n    code_strings = filter(block -> startswith(lstrip(block), 'j'), julia_blocks)\n    return join(map(block-> replace(block, r\"^(\\s*)(?:\\n|.)*\\n?\" => s\"\\1\"), \n                   code_strings[2:end]), \"\\n\")\nend\n```\nThis function works by first splitting the input string into markdown blocks separated by '```' characters. It then filters out all non-julia code blocks (those not starting with a `j` character). Finally, it joins all remaining code blocks together, separating them by newline characters. The result is returned as a single String.","status":200,"tokens":[0,200],"elapsed":5.749396699,"_type":"aimessage"}]