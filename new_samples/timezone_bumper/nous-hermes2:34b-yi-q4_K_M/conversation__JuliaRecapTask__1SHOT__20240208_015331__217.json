[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Dates\n\n\"\"\"\n    timezone_bumper(dt, bump = 3)\n\nIncrease any provided timestamp by `bump::Int` hours (defaults to +3 hours).\nWorks only for DateTime types and throws an error for Date types.\n\"\"\"\nfunction timezone_bumper(dt::AbstractDateTime, bump::Integer=3)\n    # Convert the input into a date-time object if necessary\n    if !isdatetype(typeof(dt))\n        dt = DateTime(dt) # Convert to DateTime\n    end\n\n    # Check if the input is a Date type and throw an error in that case\n    if isa(dt, Dates.Date)\n        error(\"Invalid argument: $dt (expected DateTime)\")\n    end\n\n    # Add bump hours to the date-time object\n    return dt + Hour(bump * 3600) # Convert bump into seconds\nend\n```","status":200,"tokens":[0,219],"elapsed":6.459543655,"_type":"aimessage"}]