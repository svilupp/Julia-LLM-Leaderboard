[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Solution\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{<:Number})::NamedTuple{(:average, :max, :min, :trend),Tuple{Float64,Float64,Float64,Symbol}}\n    # Handle empty input\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=:stable)\n    end\n\n    # Calculate statistics\n    avg = mean(temps)\n    mx = maximum(temps)\n    mn = minimum(temps)\n    tr = ifelse(all(x -> x >= avg, temps), :increasing, ifelse(all(x -> x <= avg, temps), :decreasing, :stable))\n    \n    # Return results in a named tuple\n    return (; average=avg, max=mx, min=mn, trend=tr)\nend\n```\n\nExplanation:\n\n* The function `weather_data_analyzer` takes a vector of numbers as input and returns a named tuple with four fields: `average`, `max`, `min`, and `trend`.\n* We first check if the input vector is empty. If it is, we return a named tuple with all values set to `nothing`.\n* Otherwise, we calculate the average, maximum, minimum, and trend of the temperature data using the `Statistics` package.\n* The `trend` field can be either `:increasing`, `:decreasing`, or `:stable`. We use a ternary operator to check if all temperatures are greater than or equal to the average (if so, the trend is `:increasing`), or if all temperatures are less than or equal to the average (if so, the trend is `:decreasing`). If neither of these conditions are true, then the trend is `:stable`.\n* Finally, we return the results in a named tuple.","status":200,"tokens":[463,444],"elapsed":11.225697883,"_type":"aimessage"}]