[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Data\n\nweather_data_analyzer([25, 27, 23, 20, 22])","variables":["task","data"],"_type":"usermessage"},{"content":"Here's the solution:\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{<:Real})::NamedTuple{(average, max, min, trend)}\n    if isempty(temps)\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n    \n    avg = Statistics.mean(temps)\n    max = maximum(temps)\n    min = minimum(temps)\n    trend = if temps[1] < temps[2] && all(x -> x > temps[i], temperatures[2:end])\n        :increasing\n    elseif temps[1] > temps[2] && all(x -> x < temps[i], temperatures[2:end])\n        :decreasing\n    else\n        :stable\n    end\n    \n    return (average=avg, max=max, min=min, trend=trend)\nend\n```\nNote that the function uses the `Statistics.mean` method to calculate the average temperature, and the `maximum` and `minimum` methods to find the maximum and minimum temperatures respectively. The `if` statement checks if the list is empty, and returns a named tuple with all values set to `nothing` if it is. Otherwise, it calculates the average, maximum, minimum, and trend using the provided data, and returns a named tuple containing these values.","status":200,"tokens":[298,326],"elapsed":8.078293533,"_type":"aimessage"}]