[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the Julia code which uses the Statistics package for calculating average and maximum/minimum temperatures and implements logic for trend detection:\n\n```julia\nusing Statistics  # we need this for mean, max, min functions\n\nfunction weather_data_analyzer(temps::AbstractVector{<:Number})\n    if isempty(temps)\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end  # if the list is empty\n\n    average = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n    \n    trend = :stable  # initialize trend as 'stable'\n    if length(temps) > 1  # we can only calculate trend for more than one temperature\n        if temps[end] > temps[begin]\n            trend = :increasing  # if last temp is higher than first, trend is increasing\n        elseif temps[end] < temps[begin]\n            trend = :decreasing  # if last temp is lower than first, trend is decreasing\n        end  # if temperatures are same, trend remains 'stable'\n    end\n\n    return (average=average, max=max_temp, min=min_temp, trend=trend)\nend  # weather_data_analyzer function ends here\n```\n\nThis function works by first checking if the list is empty and returning a named tuple with all values set to `nothing` if it is. Then it calculates average using `mean()`, maximum using `maximum()`, minimum using `minimum()`. If there are more than one temperature data points, it then checks if the last temperature is higher or lower than first, and based on that assigns trend as 'increasing' or 'decreasing'. If temperatures remain same for all days, trend remains 'stable'.\n\n{{instructions}} is not a defined variable in Julia.  Make sure to replace `{{instructions}}` with any special instructions if you have any.","status":200,"tokens":[0,459],"elapsed":13.320299216,"_type":"aimessage"}]