[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Data\n\nweather_data_analyzer([25, 27, 23, 20, 22])","variables":["task","data"],"_type":"usermessage"},{"content":"Here is your solution in Julia programming language:\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if length(temps) == 0\n        return (average = nothing, max = nothing, min = nothing, trend = nothing)\n    end\n    \n    avg_temp = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n\n    if length(temps) == 1\n        return (average=avg_temp, max=max_temp, min=min_temp, trend=:stable)\n    end\n    \n    trend = :increasing\n    for i in 2:length(temps)\n        if temps[i] < temps[i-1]\n            trend = :decreasing\n            break\n        elseif temps[i] > temps[i-1]\n            trend = :increasing\n            break\n        end\n    end\n    \n    return (average=avg_temp, max=max_temp, min=min_temp, trend=trend)\nend\n```\nThe `weather_data_analyzer` function works by first checking if the list of temperatures is empty. If it is, a named tuple with all values set to nothing is returned. If the list is not empty, we calculate the average temperature using `mean()`, the maximum and minimum temperatures using `maximum()` and `minimum()` functions respectively. \n\nThen, if there's only one temperature in the list, it returns a named tuple with the average, max, min and trend all set to that single value. If there are multiple temperatures, it checks each pair of consecutive temperatures to determine whether the trend is increasing or decreasing. It stops checking as soon as it finds a pair that doesn't match its previous pair.","status":200,"tokens":[0,422],"elapsed":12.105400974,"_type":"aimessage"}]