[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{<:Number})\n    if isempty(temps)\n        return (average = nothing, max = nothing, min = nothing, trend = nothing)\n    end\n    \n    average = mean(temps)\n    maximum = maximum(temps)\n    minimum = minimum(temps)\n\n    if length(temps) < 2\n        trend = :stable\n    elseif isincreasing(diff(temps))\n        trend = :increasing\n    elseif isdecreasing(diff(temps))\n        trend = :decreasing\n    else \n        trend = :stable\n    end\n    \n    return (average=average, max=maximum, min=minimum, trend=trend)\nend;\n\n# Helper function to check if array is increasing or decreasing\nfunction isincreasing(arr::AbstractArray{<:Number}) \n    for i in 2:length(arr)\n        if arr[i] <= arr[i-1] return false end\n    end\n    return true\nend;\n\nfunction isdecreasing(arr::AbstractArray{<:Number}) \n    for i in 2:length(arr)\n        if arr[i] >= arr[i-1] return false end\n    end\n    return true\nend;\n```\nThis solution uses the `Statistics` package and its `mean`, `maximum` and `minimum` functions to compute the average, max, and min temperatures. It also defines helper functions `isincreasing` and `isdecreasing` that check if an array is strictly increasing or decreasing. The trend of the data is determined by checking if the differences between successive elements in the temperature list are all positive (increasing) or negative (decreasing). If none of these conditions is met, the trend is considered stable.","status":200,"tokens":[0,440],"elapsed":12.754874031,"_type":"aimessage"}]