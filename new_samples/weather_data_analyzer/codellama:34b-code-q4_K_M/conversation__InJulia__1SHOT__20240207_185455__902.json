[{"content":"Act as a helpful AI assistant","variables":[],"_type":"systemmessage"},{"content":"In Julia, You are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.","variables":[],"_type":"usermessage"},{"content":"The returned data should be printed in the following format:\n```\n$ julia weather_data_analyzer.jl [-h|--help] [<temps> ...]\nAverage: 23.0°C, Max: 45.5°C, Min: -15.5°C, Trend: decreasing\n\n$ julia weather_data_analyzer.jl -h\nusage: julia weather_data_analyzer.jl [-h|--help] [<temps> ...]\n```\n\n### Solution\n```\nusing Printf, Statistics, ArgParse\n\nfunction weather_data_analyzer(temps)\n    nt = (; average=nothing, max=nothing, min=nothing, trend=nothing )\n    if isempty(temps) return nt end\n    result = (; average=mean(temps), \n                max=maximum(temps),\n                min=minimum(temps),\n                trend=trend(temps)\n            )\n    return result\nend\n\nfunction trend(data)\n    if diff(data) == zeros(length(data)-1) return :stable end\n    if all(diff(data).>0) return :increasing end\n    if all(diff(data).<0) return :decreasing end \nend\n\nfunction main()\n    args = ArgParseSettings( prog=\"weather_data_analyzer.jl\",\n                            description=\"Analyzes weather data.\",\n                            add_help=true )\n    @add_arg_table! args begin\n        \"temps\"\n            help = \"Temperature data.\"\n            arg_type = Float64\n            nargs = '*'\n            default = []\n    end\n    parsed_args = parse_args(args)\n    result = weather_data_analyzer(parsed_args[\"temps\"])\n    if isnothing(result.trend) trend = \"unknown\" else trend=string(result.trend) end\n    @printf(\"Average: %.1f°C, Max: %.1f°C, Min: %.1f°C, Trend: %s\\n\", \n            result.average, result.max, result.min, trend )\nend\n\nmain()\n```","status":200,"tokens":[0,521],"elapsed":14.282475001,"_type":"aimessage"}]