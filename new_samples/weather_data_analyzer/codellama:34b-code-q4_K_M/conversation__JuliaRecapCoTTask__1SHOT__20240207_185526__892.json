[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Tests\n\n```julia\nusing Test\n\n@testset \"weather_data_analyzer\" begin\n    @test weather_data_analyzer([1, 3, 4]) == (; average = 2.3333333333333335, min = 1, max = 4, trend = :increasing)\n    @test weather_data_analyzer([4, -7, 3, 9]) == (; average = 2.0, min = -7, max = 9, trend = :decreasing)\n    @test weather_data_analyzer([-6, 3, -8, 1, 0, 5, -4, 2, -1]) == (; average = -1.0, min = -8.0, max = 5.0, trend = :stable)\n    @test weather_data_analyzer([7, 9, 6, 3, 2, 1, 2, 1, 4]) == (; average = 4.222222222222222, min = 1, max = 9, trend = :increasing)\n    @test weather_data_analyzer([7, 8, 6, 5, 4]) == (; average = 6.0, min = 4.0, max = 8.0, trend = :decreasing)\n    @test weather_data_analyzer(Int[]) == (; average = nothing, min = nothing, max = nothing, trend = nothing)\nend\n```","status":200,"tokens":[6,383],"elapsed":10.548805556,"_type":"aimessage"}]