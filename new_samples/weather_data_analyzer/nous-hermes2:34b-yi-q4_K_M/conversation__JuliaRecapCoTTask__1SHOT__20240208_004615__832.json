[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"The user provided no special instructions. Hence I will use the guidelines mentioned earlier.\n\nHere is the Julia code for this task:\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::AbstractVector{<:Number})\n    if isempty(temps)\n        return (average = nothing, max = nothing, min = nothing, trend = nothing)\n    end\n\n    mean_temp = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n\n    if isempty(unique(temps))\n        trend = :stable\n    elseif all(diff(sort!(temps, rev=true)) .> 0)\n        trend = :increasing\n    else\n        trend = :decreasing\n    end\n\n    return (average = mean_temp, max = max_temp, min = min_temp, trend = trend)\nend\n```\n\nThis function uses the `Statistics` package to calculate the average (`mean`) and maximum/minimum (`maximum` and `minimum`) temperatures from the input list of temperature data. The `trend` is determined by checking if all values in a sorted version (in reverse order, `sort!(temps, rev=true)`) are greater than their preceding value. If they are, it is an increasing trend; otherwise, decreasing. If there are no distinct temperatures (`unique(temps)`), then the trend is considered stable. \n\nThe function returns a named tuple with four values: `average` (mean temperature), `max` (maximum temperature), `min` (minimum temperature), and `trend` (temperature trend). If the input list of temperatures is empty, it returns a named tuple where all fields are set to `nothing`.","status":200,"tokens":[11,393],"elapsed":11.804984285,"_type":"aimessage"}]