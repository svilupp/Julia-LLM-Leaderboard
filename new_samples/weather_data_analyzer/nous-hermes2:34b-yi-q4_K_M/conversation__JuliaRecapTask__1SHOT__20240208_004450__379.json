[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's an implementation of your task that follows the guidelines you provided:\n```julia\nusing Statistics\n\n\"\"\"\n    weather_data_analyzer(temps) -> namedtuple(average, max, min, trend)\n\nReturn a named tuple with the average, maximum, minimum temperature from the list of temperatures and a trend indicator. The trend can be only: `:increasing`, `:decreasing`, or `:stable`. If the list is empty, return a named tuple with all values set to `nothing`.\n\"\"\"\nfunction weather_data_analyzer(temps::AbstractVector{<:Number})\n    # Check if input data is an AbstractVector of numbers\n    if !all(isa.(temps, Number)) || length(temps) == 0\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n\n    # Calculate the statistics\n    avg = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n\n    # Determine the trend\n    if isempty(temps) || avg == 0 || max_temp == min_temp\n        trend = :stable\n    elseif avg > 0 && (avg - min_temp) < (max_temp - avg)\n        trend = :increasing\n    elseif avg < 0 && (avg - min_temp) > (max_temp - avg)\n        trend = :decreasing\n    end\n\n    # Construct the named tuple with results\n    return (average=avg, max=max_temp, min=min_temp, trend=trend)\nend\n```\n\nThis function uses the `Statistics` package to calculate the mean of the temperatures in the input list. It then checks for some special cases where it's not possible or meaningful to determine a trend (such as an empty list or zero average temperature) and returns a named tuple with all values set to `nothing`. For other scenarios, it calculates the maximum and minimum temperatures and determines the trend based on whether the average is increasing, decreasing, or stable compared to the extremes of the data.","status":200,"tokens":[0,482],"elapsed":14.427172177,"_type":"aimessage"}]