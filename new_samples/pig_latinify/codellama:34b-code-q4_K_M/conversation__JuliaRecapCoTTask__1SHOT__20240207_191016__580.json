[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a pig latin transformer called `pig_latinify` that operates on a vector of strings. It iterates over each string and changes it to pig latin. Each iteration should run on a separate thread.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"## Rust Installation\n\nRefer to the [exercism help page][help-page] for Rust installation and learning\nresources.\n\n## Writing the Code\n\nExecute the tests with:\n\n```bash\n$ cargo test\n```\n\nAll but the first test have been ignored. After you get the first test to\npass, open the tests source file which is located in the `tests` directory\nand remove the `#[ignore]` flag from the next test and get the tests to pass\nagain. Each separate test is a function with `#[test]` flag above it.\nContinue, until you pass every test. \n\nIf you wish to run all tests without editing the tests source file, use:\n\n```bash\n$ cargo test -- --ignored\n```\n\nTo run a specific test, for example `some_test`, you can use:\n\n```bash\n$ cargo test some_test\n```\n\nIf the specfic test is ignored use:\n\n```bash\n$ cargo test some_test -- --ignored\n```\n\nTo learn more about Rust tests refer to the [online test documentation][rust-tests]\n\nMake sure to read the [Modules](https://doc.rust-lang.org/book/second-edition/ch07-00-modules.html) chapter if you\nhaven't already, it will help you with organizing your files.\n\n## Feedback, Issues, Pull Requests\n\nThe [exercism/rust](https://github.com/exercism/rust) repository on GitHub is the home for all of the Rust exercises. If you have feedback about an exercise, or want to help implement new exercises, head over there and create an issue. Members of the rust track team are happy to help!\n\nIf you want to know more about Exercism, take a look at the [contribution guide](https://github.com/exercism/docs/blob/master/contributing-to-language-tracks/README.md).\n\n[help-page]: http://exercism.io/languages/rust\n[modules]: https://doc.rust-lang.org/book/second-edition/ch07-00-modules.html\n[cargo]: https://doc.rust-lang.org/book/second-edition/ch14-00-more-about-cargo.html\n[rust-tests]: https://doc.rust-lang.org/book/second-edition/ch11-02-running-tests.html\n\n## Source\n\nThe Pig Latin exercise at Test First Teaching by Ultrasaurus [https://github.com/ultrasaurus/test-first-teaching/blob/master/learn_rust/pig_latin/](https://github.com/ultrasaurus/test-first-teaching/blob/master/learn_rust/pig_latin/)\n\n## Submitting Incomplete Solutions\nIt's possible to submit an incomplete solution so you can see how others have completed the exercise.","status":200,"tokens":[0,697],"elapsed":19.130775525,"_type":"aimessage"}]