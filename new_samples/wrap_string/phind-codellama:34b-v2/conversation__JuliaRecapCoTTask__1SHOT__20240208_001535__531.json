[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(str, text_width::Int=10)\n    words = split(str)\n    lines = []\n    line = \"\"\n    for word in words\n        if length(line * \" \" * word) > text_width\n            push!(lines, line)\n            line = word\n        else\n            line = line * (line == \"\" ? \"\" : \" \") * word\n        end\n    end\n    push!(lines, line)\n    return join(lines, \"\\n\")\nend\n\n# Example\nexample_str = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque et massa odio.\"\nresult = wrap_string(example_str)\nprintln(\"Before:\\n$example_str\\nAfter:\\n$result\")\n```\nIn this example, we call `wrap_string` with a long string and print the result. The function `wrap_string` splits the input string into words and then iterates over them to build lines not exceeding the specified maximum width (10 characters by default). It uses the `push!` function to add each line to an array of lines, which are then joined together with newline characters in between. The result is a new string with newline characters inserted as necessary to keep each line within the specified text width.","status":200,"tokens":[0,299],"elapsed":7.641426815,"_type":"aimessage"}]