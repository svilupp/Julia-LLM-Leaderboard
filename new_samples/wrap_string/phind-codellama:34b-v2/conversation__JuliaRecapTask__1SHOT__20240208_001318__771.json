[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(s::AbstractString, text_width::Int=10)\n    words = split(s)\n    lines = []\n    line = \"\"\n    \n    for word in words\n        if length(line) + length(word) > text_width  # new line is needed\n            push!(lines, line)\n            line = \"\"\n        end\n        \n        line *= \" \" * word\n    end\n    \n    push!(lines, line)  # push the remaining line\n    \n    return join(lines, \"\\n\")\nend\n\n# Example usage:\ns = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\ntext_width = 10\nwrapped_string = wrap_string(s, text_width)\nprintln(\"Original string:\\n$s\\n\")\nprintln(\"Wrapped string:\\n$wrapped_string\")\n```\n\nIn this example, the function `wrap_string` is defined to wrap a given string at a specified `text_width`. It splits the input string into words and then iterates over each word. If appending the current word to the current line would exceed the `text_width`, it pushes the current line to the list of lines, starts a new line with this word, and continues. Once all words have been processed, any remaining line is also pushed to the list of lines. Finally, the wrapped string is returned as a single string joined by newline characters.\n\nThe example usage demonstrates how to use the function with an input string `s` and a `text_width` of 10. The output will be the original string followed by the wrapped string.","status":200,"tokens":[367,380],"elapsed":10.08624152,"_type":"aimessage"}]