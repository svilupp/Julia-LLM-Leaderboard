[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(s::String, text_width::Int = 10)\n    words = split(s)\n    lines = []\n    current_line = \"\"\n    for word in words\n        if length(current_line) + length(word) > text_width\n            push!(lines, current_line)\n            current_line = word\n        else\n            current_line = isempty(current_line) ? word : string(current_line, \" \", word)\n        end\n    end\n    if !isempty(current_line)\n        push!(lines, current_line)\n    end\n    return join(lines, \"\\n\")\nend\n\n# Example usage:\nexample_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.\"\nresult = wrap_string(example_text)\nprintln(result)\n```\nThis function takes a string `s` and an optional argument `text_width` which defaults to 10. The function splits the input string into words using `split()`, then iterates through these words. If adding a word to the current line would exceed the maximum text width, the current line is saved in an array of lines (`lines`) and the word becomes the start of a new line. After the loop, if there's any remaining text in the current line, it gets saved as another line. Finally, all the lines are joined together with newline characters to create the final wrapped string.","status":200,"tokens":[0,336],"elapsed":8.613596383,"_type":"aimessage"}]