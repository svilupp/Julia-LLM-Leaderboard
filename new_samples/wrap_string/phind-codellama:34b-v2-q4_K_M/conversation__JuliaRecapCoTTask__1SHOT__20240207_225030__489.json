[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(input_string, text_width::Int=10)\n    words = split(input_string)\n    wrapped_text = \"\"\n    \n    current_line_length = 0\n    for word in words\n        word_length = length(word) + 1 # Add one for the space\n        \n        if (current_line_length + word_length > text_width) && (current_line_length != 0)\n            wrapped_text *= '\\n'\n            current_line_length = 0\n        else\n            wrapped_text *= ' '\n            current_line_length += 1\n        end\n        \n        wrapped_text *= word\n        current_line_length += word_length\n    end\n    \n    return wrapped_text\nend\n\n# Example usage:\nexample_string = \"This is a long string that needs to be wrapped at a specific text width.\"\nwrapped_string = wrap_string(example_string, 10)\nprintln(wrapped_string)\n```\nIn the above code snippet, `wrap_string` function takes an input string and a text width (default is 10). It iterates over each word in the input string, checks if adding the next word would exceed the text width, and if so, starts a new line. The wrapped string is then returned.","status":200,"tokens":[0,313],"elapsed":8.671748948,"_type":"aimessage"}]