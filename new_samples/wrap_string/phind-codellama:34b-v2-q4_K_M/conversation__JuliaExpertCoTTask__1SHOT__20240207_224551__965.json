[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(input_str::String, text_width::Int = 10)\n    words = split(input_str)\n    result = IOBuffer()\n    current_line_length = 0\n\n    for word in words\n        word_length = length(word)\n\n        # If adding the new word would exceed the line width, start a new line\n        if current_line_length + word_length > text_width\n            print(result, \"\\n\")\n            current_line_length = 0\n        else\n            # Add a space between this word and the previous one if not at the beginning of the line\n            if current_line_length != 0\n                print(result, ' ')\n                current_line_length += 1\n            end\n        end\n\n        print(result, word)\n        current_line_length += word_length\n    end\n\n    return String(take!(result))\nend\n\n# Example usage:\noutput_str = wrap_string(\"This function will wrap words into lines\")\nprintln(output_str)\n```","status":200,"tokens":[0,251],"elapsed":6.854950516,"_type":"aimessage"}]